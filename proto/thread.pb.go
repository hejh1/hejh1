//nolint

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: thread.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThreadVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	CreatorUid    string                 `protobuf:"bytes,2,opt,name=creatorUid,proto3" json:"creatorUid,omitempty"`
	ShareId       string                 `protobuf:"bytes,3,opt,name=shareId,proto3" json:"shareId,omitempty"`
	ThoughtId     string                 `protobuf:"bytes,4,opt,name=thoughtId,proto3" json:"thoughtId,omitempty"`
	LikeCount     *int64                 `protobuf:"varint,11,opt,name=likeCount,proto3,oneof" json:"likeCount,omitempty"`
	RemixCount    *int64                 `protobuf:"varint,12,opt,name=remixCount,proto3,oneof" json:"remixCount,omitempty"`
	ShareCount    *int64                 `protobuf:"varint,13,opt,name=shareCount,proto3,oneof" json:"shareCount,omitempty"`
	ParentShareId *string                `protobuf:"bytes,14,opt,name=parentShareId,proto3,oneof" json:"parentShareId,omitempty"`
	ThreadId      *string                `protobuf:"bytes,15,opt,name=threadId,proto3,oneof" json:"threadId,omitempty"`
	MediaReady    *bool                  `protobuf:"varint,16,opt,name=mediaReady,proto3,oneof" json:"mediaReady,omitempty"`
	HDReady       *bool                  `protobuf:"varint,17,opt,name=HDReady,proto3,oneof" json:"HDReady,omitempty"`
	SDReady       *bool                  `protobuf:"varint,18,opt,name=SDReady,proto3,oneof" json:"SDReady,omitempty"`
	AppId         *string                `protobuf:"bytes,19,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
}

func (x *ThreadVideo) Reset() {
	*x = ThreadVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadVideo) ProtoMessage() {}

func (x *ThreadVideo) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadVideo.ProtoReflect.Descriptor instead.
func (*ThreadVideo) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{0}
}

func (x *ThreadVideo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ThreadVideo) GetCreatorUid() string {
	if x != nil {
		return x.CreatorUid
	}
	return ""
}

func (x *ThreadVideo) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

func (x *ThreadVideo) GetThoughtId() string {
	if x != nil {
		return x.ThoughtId
	}
	return ""
}

func (x *ThreadVideo) GetLikeCount() int64 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *ThreadVideo) GetRemixCount() int64 {
	if x != nil && x.RemixCount != nil {
		return *x.RemixCount
	}
	return 0
}

func (x *ThreadVideo) GetShareCount() int64 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *ThreadVideo) GetParentShareId() string {
	if x != nil && x.ParentShareId != nil {
		return *x.ParentShareId
	}
	return ""
}

func (x *ThreadVideo) GetThreadId() string {
	if x != nil && x.ThreadId != nil {
		return *x.ThreadId
	}
	return ""
}

func (x *ThreadVideo) GetMediaReady() bool {
	if x != nil && x.MediaReady != nil {
		return *x.MediaReady
	}
	return false
}

func (x *ThreadVideo) GetHDReady() bool {
	if x != nil && x.HDReady != nil {
		return *x.HDReady
	}
	return false
}

func (x *ThreadVideo) GetSDReady() bool {
	if x != nil && x.SDReady != nil {
		return *x.SDReady
	}
	return false
}

func (x *ThreadVideo) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All creators to this thread.
	Creators []string `protobuf:"bytes,1,rep,name=creators,proto3" json:"creators,omitempty"`
	// The last time when one new video is added to the thread.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	// The original video id that starts the thread.
	OrigShareId string `protobuf:"bytes,3,opt,name=origShareId,proto3" json:"origShareId,omitempty"`
	// The original author uid that starts the thread.
	OrigUid string `protobuf:"bytes,4,opt,name=origUid,proto3" json:"origUid,omitempty"`
	// The start time of the thread.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// The unique id that identifies the thread.
	ThreadId string `protobuf:"bytes,6,opt,name=threadId,proto3" json:"threadId,omitempty"`
	// Title of the thread, editable by author only
	Title *string `protobuf:"bytes,11,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Descriptions of the thread, editable by author only
	Descriptions *string `protobuf:"bytes,17,opt,name=descriptions,proto3,oneof" json:"descriptions,omitempty"`
	// Descriptions of the thread, editable by author only
	Hashtags *string `protobuf:"bytes,21,opt,name=hashtags,proto3,oneof" json:"hashtags,omitempty"`
	// Descriptions of the thread, editable by author only
	Color *string `protobuf:"bytes,24,opt,name=color,proto3,oneof" json:"color,omitempty"`
	// Total likes count from all thread videos
	TotalLikeCount *int64 `protobuf:"varint,12,opt,name=totalLikeCount,proto3,oneof" json:"totalLikeCount,omitempty"`
	// Total shares count from all thread videos
	TotalShareCount *int64 `protobuf:"varint,13,opt,name=totalShareCount,proto3,oneof" json:"totalShareCount,omitempty"`
	// Total remix count from all thread videos
	TotalRemixCount *int64 `protobuf:"varint,14,opt,name=totalRemixCount,proto3,oneof" json:"totalRemixCount,omitempty"`
	// Thread state. Currently supported state: deleting
	State *string `protobuf:"bytes,16,opt,name=state,proto3,oneof" json:"state,omitempty"`
	// A place name tag to the thread
	PlaceName *string `protobuf:"bytes,18,opt,name=placeName,proto3,oneof" json:"placeName,omitempty"`
	// A place id to the thread, based on google map definition
	PlaceID *string `protobuf:"bytes,20,opt,name=placeID,proto3,oneof" json:"placeID,omitempty"`
	// A place coordinate tag to the thread [retired]
	PlaceCoordinate *Coordinate2D `protobuf:"bytes,19,opt,name=placeCoordinate,proto3,oneof" json:"placeCoordinate,omitempty"`
	// A score representing priority in feed
	FeedScore *float64 `protobuf:"fixed64,22,opt,name=feedScore,proto3,oneof" json:"feedScore,omitempty"`
	// App bundle identifier
	AppId *string `protobuf:"bytes,23,opt,name=appId,proto3,oneof" json:"appId,omitempty"`
	// A group (community) name
	GroupName *string `protobuf:"bytes,25,opt,name=groupName,proto3,oneof" json:"groupName,omitempty"`
	// The language preference of the thread
	Language *string `protobuf:"bytes,26,opt,name=language,proto3,oneof" json:"language,omitempty"`
	// The album video which showcase the highlights of the thread
	AlbumVideoPath *string `protobuf:"bytes,27,opt,name=albumVideoPath,proto3,oneof" json:"albumVideoPath,omitempty"`
	// The album video thumbnail
	AlbumVideoThumbnailPath *string `protobuf:"bytes,28,opt,name=albumVideoThumbnailPath,proto3,oneof" json:"albumVideoThumbnailPath,omitempty"`
	// The place latitude
	PlaceLatitude *float64 `protobuf:"fixed64,29,opt,name=placeLatitude,proto3,oneof" json:"placeLatitude,omitempty"`
	// The place longitude
	PlaceLongitude *float64 `protobuf:"fixed64,30,opt,name=placeLongitude,proto3,oneof" json:"placeLongitude,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{1}
}

func (x *Thread) GetCreators() []string {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *Thread) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *Thread) GetOrigShareId() string {
	if x != nil {
		return x.OrigShareId
	}
	return ""
}

func (x *Thread) GetOrigUid() string {
	if x != nil {
		return x.OrigUid
	}
	return ""
}

func (x *Thread) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Thread) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Thread) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Thread) GetDescriptions() string {
	if x != nil && x.Descriptions != nil {
		return *x.Descriptions
	}
	return ""
}

func (x *Thread) GetHashtags() string {
	if x != nil && x.Hashtags != nil {
		return *x.Hashtags
	}
	return ""
}

func (x *Thread) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *Thread) GetTotalLikeCount() int64 {
	if x != nil && x.TotalLikeCount != nil {
		return *x.TotalLikeCount
	}
	return 0
}

func (x *Thread) GetTotalShareCount() int64 {
	if x != nil && x.TotalShareCount != nil {
		return *x.TotalShareCount
	}
	return 0
}

func (x *Thread) GetTotalRemixCount() int64 {
	if x != nil && x.TotalRemixCount != nil {
		return *x.TotalRemixCount
	}
	return 0
}

func (x *Thread) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Thread) GetPlaceName() string {
	if x != nil && x.PlaceName != nil {
		return *x.PlaceName
	}
	return ""
}

func (x *Thread) GetPlaceID() string {
	if x != nil && x.PlaceID != nil {
		return *x.PlaceID
	}
	return ""
}

func (x *Thread) GetPlaceCoordinate() *Coordinate2D {
	if x != nil {
		return x.PlaceCoordinate
	}
	return nil
}

func (x *Thread) GetFeedScore() float64 {
	if x != nil && x.FeedScore != nil {
		return *x.FeedScore
	}
	return 0
}

func (x *Thread) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *Thread) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

func (x *Thread) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Thread) GetAlbumVideoPath() string {
	if x != nil && x.AlbumVideoPath != nil {
		return *x.AlbumVideoPath
	}
	return ""
}

func (x *Thread) GetAlbumVideoThumbnailPath() string {
	if x != nil && x.AlbumVideoThumbnailPath != nil {
		return *x.AlbumVideoThumbnailPath
	}
	return ""
}

func (x *Thread) GetPlaceLatitude() float64 {
	if x != nil && x.PlaceLatitude != nil {
		return *x.PlaceLatitude
	}
	return 0
}

func (x *Thread) GetPlaceLongitude() float64 {
	if x != nil && x.PlaceLongitude != nil {
		return *x.PlaceLongitude
	}
	return 0
}

type ThreadAndVideoTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread      *Thread      `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	ThreadVideo *ThreadVideo `protobuf:"bytes,2,opt,name=threadVideo,proto3" json:"threadVideo,omitempty"`
}

func (x *ThreadAndVideoTuple) Reset() {
	*x = ThreadAndVideoTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadAndVideoTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadAndVideoTuple) ProtoMessage() {}

func (x *ThreadAndVideoTuple) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadAndVideoTuple.ProtoReflect.Descriptor instead.
func (*ThreadAndVideoTuple) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadAndVideoTuple) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *ThreadAndVideoTuple) GetThreadVideo() *ThreadVideo {
	if x != nil {
		return x.ThreadVideo
	}
	return nil
}

type ResponseFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode string                 `protobuf:"bytes,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg  string                 `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Data    []*ThreadAndVideoTuple `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseFeed) Reset() {
	*x = ResponseFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFeed) ProtoMessage() {}

func (x *ResponseFeed) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFeed.ProtoReflect.Descriptor instead.
func (*ResponseFeed) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseFeed) GetErrCode() string {
	if x != nil {
		return x.ErrCode
	}
	return ""
}

func (x *ResponseFeed) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseFeed) GetData() []*ThreadAndVideoTuple {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseNewestThreads struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode string         `protobuf:"bytes,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Datas   []*ThreadVideo `protobuf:"bytes,3,rep,name=Datas,proto3" json:"Datas,omitempty"`
}

func (x *ResponseNewestThreads) Reset() {
	*x = ResponseNewestThreads{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseNewestThreads) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNewestThreads) ProtoMessage() {}

func (x *ResponseNewestThreads) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNewestThreads.ProtoReflect.Descriptor instead.
func (*ResponseNewestThreads) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseNewestThreads) GetErrCode() string {
	if x != nil {
		return x.ErrCode
	}
	return ""
}

func (x *ResponseNewestThreads) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseNewestThreads) GetDatas() []*ThreadVideo {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Coordinate2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Coordinate2D) Reset() {
	*x = Coordinate2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate2D) ProtoMessage() {}

func (x *Coordinate2D) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate2D.ProtoReflect.Descriptor instead.
func (*Coordinate2D) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{5}
}

func (x *Coordinate2D) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Coordinate2D) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type RequestFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        *string       `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	Coordinate *Coordinate2D `protobuf:"bytes,2,opt,name=coordinate,proto3,oneof" json:"coordinate,omitempty"`
	AppID      *string       `protobuf:"bytes,3,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	RequestID  *string       `protobuf:"bytes,4,opt,name=requestID,proto3,oneof" json:"requestID,omitempty"`
	Language   *string       `protobuf:"bytes,5,opt,name=language,proto3,oneof" json:"language,omitempty"`
	GroupName  *string       `protobuf:"bytes,6,opt,name=groupName,proto3,oneof" json:"groupName,omitempty"`
}

func (x *RequestFeed) Reset() {
	*x = RequestFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thread_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFeed) ProtoMessage() {}

func (x *RequestFeed) ProtoReflect() protoreflect.Message {
	mi := &file_thread_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFeed.ProtoReflect.Descriptor instead.
func (*RequestFeed) Descriptor() ([]byte, []int) {
	return file_thread_proto_rawDescGZIP(), []int{6}
}

func (x *RequestFeed) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *RequestFeed) GetCoordinate() *Coordinate2D {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *RequestFeed) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *RequestFeed) GetRequestID() string {
	if x != nil && x.RequestID != nil {
		return *x.RequestID
	}
	return ""
}

func (x *RequestFeed) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *RequestFeed) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

var File_thread_proto protoreflect.FileDescriptor

var file_thread_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x04, 0x0a, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x61, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x48, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x07, 0x48, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53,
	0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x07,
	0x53, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x48, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x53, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x98, 0x0a, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x32, 0x44, 0x48, 0x0a, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52,
	0x09, 0x66, 0x65, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0e, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x17, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x11, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x13,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x22, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x41,
	0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x73, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x65,
	0x77, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a,
	0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x48, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x32, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x32,
	0x44, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x23,
	0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6f, 0x67,
	0x77, 0x61, 0x79, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thread_proto_rawDescOnce sync.Once
	file_thread_proto_rawDescData = file_thread_proto_rawDesc
)

func file_thread_proto_rawDescGZIP() []byte {
	file_thread_proto_rawDescOnce.Do(func() {
		file_thread_proto_rawDescData = protoimpl.X.CompressGZIP(file_thread_proto_rawDescData)
	})
	return file_thread_proto_rawDescData
}

var file_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_thread_proto_goTypes = []interface{}{
	(*ThreadVideo)(nil),           // 0: proto.ThreadVideo
	(*Thread)(nil),                // 1: proto.Thread
	(*ThreadAndVideoTuple)(nil),   // 2: proto.ThreadAndVideoTuple
	(*ResponseFeed)(nil),          // 3: proto.ResponseFeed
	(*ResponseNewestThreads)(nil), // 4: proto.ResponseNewestThreads
	(*Coordinate2D)(nil),          // 5: proto.Coordinate2D
	(*RequestFeed)(nil),           // 6: proto.RequestFeed
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_thread_proto_depIdxs = []int32{
	7, // 0: proto.ThreadVideo.creationTime:type_name -> google.protobuf.Timestamp
	7, // 1: proto.Thread.lastUpdateTime:type_name -> google.protobuf.Timestamp
	7, // 2: proto.Thread.startTime:type_name -> google.protobuf.Timestamp
	5, // 3: proto.Thread.placeCoordinate:type_name -> proto.Coordinate2D
	1, // 4: proto.ThreadAndVideoTuple.thread:type_name -> proto.Thread
	0, // 5: proto.ThreadAndVideoTuple.threadVideo:type_name -> proto.ThreadVideo
	2, // 6: proto.ResponseFeed.data:type_name -> proto.ThreadAndVideoTuple
	0, // 7: proto.ResponseNewestThreads.Datas:type_name -> proto.ThreadVideo
	5, // 8: proto.RequestFeed.coordinate:type_name -> proto.Coordinate2D
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_thread_proto_init() }
func file_thread_proto_init() {
	if File_thread_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thread_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadAndVideoTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseNewestThreads); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thread_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_thread_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_thread_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_thread_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thread_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_thread_proto_goTypes,
		DependencyIndexes: file_thread_proto_depIdxs,
		MessageInfos:      file_thread_proto_msgTypes,
	}.Build()
	File_thread_proto = out.File
	file_thread_proto_rawDesc = nil
	file_thread_proto_goTypes = nil
	file_thread_proto_depIdxs = nil
}
