// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thought.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Proto_Thought {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var creationTime: Int64 = 0

  var serverMergedMediaPath: String = String()

  var serverMergedMediaSize: Int64 = 0

  var serverExportedMediaPath: String = String()

  var serverExportedMediaSize: Int64 = 0

  var serverThumbnailImagePath: String = String()

  var serverThumbnailSize: Int64 = 0

  var serverHdmediaPath: String = String()

  var serverHdmediaSize: Int64 = 0

  var serverSdmediaPath: String = String()

  var serverSdmediaSize: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_Thought: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Thought: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Thought"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionId"),
    2: .same(proto: "creationTime"),
    11: .same(proto: "serverMergedMediaPath"),
    12: .same(proto: "serverMergedMediaSize"),
    13: .same(proto: "serverExportedMediaPath"),
    14: .same(proto: "serverExportedMediaSize"),
    15: .same(proto: "serverThumbnailImagePath"),
    16: .same(proto: "serverThumbnailSize"),
    17: .same(proto: "serverHDMediaPath"),
    18: .same(proto: "serverHDMediaSize"),
    19: .same(proto: "serverSDMediaPath"),
    20: .same(proto: "serverSDMediaSize"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.creationTime) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.serverMergedMediaPath) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.serverMergedMediaSize) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.serverExportedMediaPath) }()
      case 14: try { try decoder.decodeSingularInt64Field(value: &self.serverExportedMediaSize) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.serverThumbnailImagePath) }()
      case 16: try { try decoder.decodeSingularInt64Field(value: &self.serverThumbnailSize) }()
      case 17: try { try decoder.decodeSingularStringField(value: &self.serverHdmediaPath) }()
      case 18: try { try decoder.decodeSingularInt64Field(value: &self.serverHdmediaSize) }()
      case 19: try { try decoder.decodeSingularStringField(value: &self.serverSdmediaPath) }()
      case 20: try { try decoder.decodeSingularInt64Field(value: &self.serverSdmediaSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if self.creationTime != 0 {
      try visitor.visitSingularInt64Field(value: self.creationTime, fieldNumber: 2)
    }
    if !self.serverMergedMediaPath.isEmpty {
      try visitor.visitSingularStringField(value: self.serverMergedMediaPath, fieldNumber: 11)
    }
    if self.serverMergedMediaSize != 0 {
      try visitor.visitSingularInt64Field(value: self.serverMergedMediaSize, fieldNumber: 12)
    }
    if !self.serverExportedMediaPath.isEmpty {
      try visitor.visitSingularStringField(value: self.serverExportedMediaPath, fieldNumber: 13)
    }
    if self.serverExportedMediaSize != 0 {
      try visitor.visitSingularInt64Field(value: self.serverExportedMediaSize, fieldNumber: 14)
    }
    if !self.serverThumbnailImagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.serverThumbnailImagePath, fieldNumber: 15)
    }
    if self.serverThumbnailSize != 0 {
      try visitor.visitSingularInt64Field(value: self.serverThumbnailSize, fieldNumber: 16)
    }
    if !self.serverHdmediaPath.isEmpty {
      try visitor.visitSingularStringField(value: self.serverHdmediaPath, fieldNumber: 17)
    }
    if self.serverHdmediaSize != 0 {
      try visitor.visitSingularInt64Field(value: self.serverHdmediaSize, fieldNumber: 18)
    }
    if !self.serverSdmediaPath.isEmpty {
      try visitor.visitSingularStringField(value: self.serverSdmediaPath, fieldNumber: 19)
    }
    if self.serverSdmediaSize != 0 {
      try visitor.visitSingularInt64Field(value: self.serverSdmediaSize, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_Thought, rhs: Proto_Thought) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.creationTime != rhs.creationTime {return false}
    if lhs.serverMergedMediaPath != rhs.serverMergedMediaPath {return false}
    if lhs.serverMergedMediaSize != rhs.serverMergedMediaSize {return false}
    if lhs.serverExportedMediaPath != rhs.serverExportedMediaPath {return false}
    if lhs.serverExportedMediaSize != rhs.serverExportedMediaSize {return false}
    if lhs.serverThumbnailImagePath != rhs.serverThumbnailImagePath {return false}
    if lhs.serverThumbnailSize != rhs.serverThumbnailSize {return false}
    if lhs.serverHdmediaPath != rhs.serverHdmediaPath {return false}
    if lhs.serverHdmediaSize != rhs.serverHdmediaSize {return false}
    if lhs.serverSdmediaPath != rhs.serverSdmediaPath {return false}
    if lhs.serverSdmediaSize != rhs.serverSdmediaSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
