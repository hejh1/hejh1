// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: creator_profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Proto_CreatorProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creatorUid: String {
    get {return _storage._creatorUid ?? String()}
    set {_uniqueStorage()._creatorUid = newValue}
  }
  /// Returns true if `creatorUid` has been explicitly set.
  public var hasCreatorUid: Bool {return _storage._creatorUid != nil}
  /// Clears the value of `creatorUid`. Subsequent reads from it will return its default value.
  public mutating func clearCreatorUid() {_uniqueStorage()._creatorUid = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var bio: String {
    get {return _storage._bio ?? String()}
    set {_uniqueStorage()._bio = newValue}
  }
  /// Returns true if `bio` has been explicitly set.
  public var hasBio: Bool {return _storage._bio != nil}
  /// Clears the value of `bio`. Subsequent reads from it will return its default value.
  public mutating func clearBio() {_uniqueStorage()._bio = nil}

  public var photoURL: String {
    get {return _storage._photoURL ?? String()}
    set {_uniqueStorage()._photoURL = newValue}
  }
  /// Returns true if `photoURL` has been explicitly set.
  public var hasPhotoURL: Bool {return _storage._photoURL != nil}
  /// Clears the value of `photoURL`. Subsequent reads from it will return its default value.
  public mutating func clearPhotoURL() {_uniqueStorage()._photoURL = nil}

  public var isPrivate: Bool {
    get {return _storage._isPrivate ?? false}
    set {_uniqueStorage()._isPrivate = newValue}
  }
  /// Returns true if `isPrivate` has been explicitly set.
  public var hasIsPrivate: Bool {return _storage._isPrivate != nil}
  /// Clears the value of `isPrivate`. Subsequent reads from it will return its default value.
  public mutating func clearIsPrivate() {_uniqueStorage()._isPrivate = nil}

  public var karma: Float {
    get {return _storage._karma ?? 0}
    set {_uniqueStorage()._karma = newValue}
  }
  /// Returns true if `karma` has been explicitly set.
  public var hasKarma: Bool {return _storage._karma != nil}
  /// Clears the value of `karma`. Subsequent reads from it will return its default value.
  public mutating func clearKarma() {_uniqueStorage()._karma = nil}

  public var inWaitingList: Bool {
    get {return _storage._inWaitingList ?? false}
    set {_uniqueStorage()._inWaitingList = newValue}
  }
  /// Returns true if `inWaitingList` has been explicitly set.
  public var hasInWaitingList: Bool {return _storage._inWaitingList != nil}
  /// Clears the value of `inWaitingList`. Subsequent reads from it will return its default value.
  public mutating func clearInWaitingList() {_uniqueStorage()._inWaitingList = nil}

  public var maxInvite: Int64 {
    get {return _storage._maxInvite ?? 0}
    set {_uniqueStorage()._maxInvite = newValue}
  }
  /// Returns true if `maxInvite` has been explicitly set.
  public var hasMaxInvite: Bool {return _storage._maxInvite != nil}
  /// Clears the value of `maxInvite`. Subsequent reads from it will return its default value.
  public mutating func clearMaxInvite() {_uniqueStorage()._maxInvite = nil}

  public var usedInvite: Int64 {
    get {return _storage._usedInvite ?? 0}
    set {_uniqueStorage()._usedInvite = newValue}
  }
  /// Returns true if `usedInvite` has been explicitly set.
  public var hasUsedInvite: Bool {return _storage._usedInvite != nil}
  /// Clears the value of `usedInvite`. Subsequent reads from it will return its default value.
  public mutating func clearUsedInvite() {_uniqueStorage()._usedInvite = nil}

  public var username: String {
    get {return _storage._username ?? String()}
    set {_uniqueStorage()._username = newValue}
  }
  /// Returns true if `username` has been explicitly set.
  public var hasUsername: Bool {return _storage._username != nil}
  /// Clears the value of `username`. Subsequent reads from it will return its default value.
  public mutating func clearUsername() {_uniqueStorage()._username = nil}

  public var isNpc: Bool {
    get {return _storage._isNpc ?? false}
    set {_uniqueStorage()._isNpc = newValue}
  }
  /// Returns true if `isNpc` has been explicitly set.
  public var hasIsNpc: Bool {return _storage._isNpc != nil}
  /// Clears the value of `isNpc`. Subsequent reads from it will return its default value.
  public mutating func clearIsNpc() {_uniqueStorage()._isNpc = nil}

  public var isDeleted: Bool {
    get {return _storage._isDeleted ?? false}
    set {_uniqueStorage()._isDeleted = newValue}
  }
  /// Returns true if `isDeleted` has been explicitly set.
  public var hasIsDeleted: Bool {return _storage._isDeleted != nil}
  /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
  public mutating func clearIsDeleted() {_uniqueStorage()._isDeleted = nil}

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var huddleKarma: Float {
    get {return _storage._huddleKarma ?? 0}
    set {_uniqueStorage()._huddleKarma = newValue}
  }
  /// Returns true if `huddleKarma` has been explicitly set.
  public var hasHuddleKarma: Bool {return _storage._huddleKarma != nil}
  /// Clears the value of `huddleKarma`. Subsequent reads from it will return its default value.
  public mutating func clearHuddleKarma() {_uniqueStorage()._huddleKarma = nil}

  public var subscriptionTier: String {
    get {return _storage._subscriptionTier ?? String()}
    set {_uniqueStorage()._subscriptionTier = newValue}
  }
  /// Returns true if `subscriptionTier` has been explicitly set.
  public var hasSubscriptionTier: Bool {return _storage._subscriptionTier != nil}
  /// Clears the value of `subscriptionTier`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionTier() {_uniqueStorage()._subscriptionTier = nil}

  public var subscriptionExpirationDate: String {
    get {return _storage._subscriptionExpirationDate ?? String()}
    set {_uniqueStorage()._subscriptionExpirationDate = newValue}
  }
  /// Returns true if `subscriptionExpirationDate` has been explicitly set.
  public var hasSubscriptionExpirationDate: Bool {return _storage._subscriptionExpirationDate != nil}
  /// Clears the value of `subscriptionExpirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionExpirationDate() {_uniqueStorage()._subscriptionExpirationDate = nil}

  public var subscriptionCredits: Int64 {
    get {return _storage._subscriptionCredits ?? 0}
    set {_uniqueStorage()._subscriptionCredits = newValue}
  }
  /// Returns true if `subscriptionCredits` has been explicitly set.
  public var hasSubscriptionCredits: Bool {return _storage._subscriptionCredits != nil}
  /// Clears the value of `subscriptionCredits`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionCredits() {_uniqueStorage()._subscriptionCredits = nil}

  public var subscriptionTrainingCredits: Int64 {
    get {return _storage._subscriptionTrainingCredits ?? 0}
    set {_uniqueStorage()._subscriptionTrainingCredits = newValue}
  }
  /// Returns true if `subscriptionTrainingCredits` has been explicitly set.
  public var hasSubscriptionTrainingCredits: Bool {return _storage._subscriptionTrainingCredits != nil}
  /// Clears the value of `subscriptionTrainingCredits`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriptionTrainingCredits() {_uniqueStorage()._subscriptionTrainingCredits = nil}

  public var isFeatured: Bool {
    get {return _storage._isFeatured ?? false}
    set {_uniqueStorage()._isFeatured = newValue}
  }
  /// Returns true if `isFeatured` has been explicitly set.
  public var hasIsFeatured: Bool {return _storage._isFeatured != nil}
  /// Clears the value of `isFeatured`. Subsequent reads from it will return its default value.
  public mutating func clearIsFeatured() {_uniqueStorage()._isFeatured = nil}

  public var modelPrivacy: String {
    get {return _storage._modelPrivacy ?? String()}
    set {_uniqueStorage()._modelPrivacy = newValue}
  }
  /// Returns true if `modelPrivacy` has been explicitly set.
  public var hasModelPrivacy: Bool {return _storage._modelPrivacy != nil}
  /// Clears the value of `modelPrivacy`. Subsequent reads from it will return its default value.
  public mutating func clearModelPrivacy() {_uniqueStorage()._modelPrivacy = nil}

  public var realmCredits: Int64 {
    get {return _storage._realmCredits ?? 0}
    set {_uniqueStorage()._realmCredits = newValue}
  }
  /// Returns true if `realmCredits` has been explicitly set.
  public var hasRealmCredits: Bool {return _storage._realmCredits != nil}
  /// Clears the value of `realmCredits`. Subsequent reads from it will return its default value.
  public mutating func clearRealmCredits() {_uniqueStorage()._realmCredits = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CreatorProfiles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var profiles: [Proto_CreatorProfile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_CreatorProfile: @unchecked Sendable {}
extension Proto_CreatorProfiles: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CreatorProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatorProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creatorUid"),
    2: .same(proto: "name"),
    3: .same(proto: "bio"),
    4: .same(proto: "photoUrl"),
    5: .same(proto: "isPrivate"),
    6: .same(proto: "karma"),
    7: .same(proto: "inWaitingList"),
    8: .same(proto: "maxInvite"),
    9: .same(proto: "usedInvite"),
    10: .same(proto: "username"),
    11: .same(proto: "isNPC"),
    12: .same(proto: "isDeleted"),
    13: .same(proto: "tags"),
    14: .same(proto: "huddleKarma"),
    15: .same(proto: "subscriptionTier"),
    16: .same(proto: "subscriptionExpirationDate"),
    17: .same(proto: "subscriptionCredits"),
    18: .same(proto: "subscriptionTrainingCredits"),
    19: .same(proto: "isFeatured"),
    20: .same(proto: "modelPrivacy"),
    21: .same(proto: "realmCredits"),
  ]

  fileprivate class _StorageClass {
    var _creatorUid: String? = nil
    var _name: String? = nil
    var _bio: String? = nil
    var _photoURL: String? = nil
    var _isPrivate: Bool? = nil
    var _karma: Float? = nil
    var _inWaitingList: Bool? = nil
    var _maxInvite: Int64? = nil
    var _usedInvite: Int64? = nil
    var _username: String? = nil
    var _isNpc: Bool? = nil
    var _isDeleted: Bool? = nil
    var _tags: [String] = []
    var _huddleKarma: Float? = nil
    var _subscriptionTier: String? = nil
    var _subscriptionExpirationDate: String? = nil
    var _subscriptionCredits: Int64? = nil
    var _subscriptionTrainingCredits: Int64? = nil
    var _isFeatured: Bool? = nil
    var _modelPrivacy: String? = nil
    var _realmCredits: Int64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _creatorUid = source._creatorUid
      _name = source._name
      _bio = source._bio
      _photoURL = source._photoURL
      _isPrivate = source._isPrivate
      _karma = source._karma
      _inWaitingList = source._inWaitingList
      _maxInvite = source._maxInvite
      _usedInvite = source._usedInvite
      _username = source._username
      _isNpc = source._isNpc
      _isDeleted = source._isDeleted
      _tags = source._tags
      _huddleKarma = source._huddleKarma
      _subscriptionTier = source._subscriptionTier
      _subscriptionExpirationDate = source._subscriptionExpirationDate
      _subscriptionCredits = source._subscriptionCredits
      _subscriptionTrainingCredits = source._subscriptionTrainingCredits
      _isFeatured = source._isFeatured
      _modelPrivacy = source._modelPrivacy
      _realmCredits = source._realmCredits
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._creatorUid) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bio) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._photoURL) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isPrivate) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._karma) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._inWaitingList) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._maxInvite) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._usedInvite) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._username) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isNpc) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._isDeleted) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._tags) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._huddleKarma) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._subscriptionTier) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._subscriptionExpirationDate) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._subscriptionCredits) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._subscriptionTrainingCredits) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._isFeatured) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._modelPrivacy) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._realmCredits) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._creatorUid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._bio {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._photoURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._isPrivate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._karma {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._inWaitingList {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._maxInvite {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._usedInvite {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._username {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._isNpc {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._isDeleted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 13)
      }
      try { if let v = _storage._huddleKarma {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._subscriptionTier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._subscriptionExpirationDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._subscriptionCredits {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._subscriptionTrainingCredits {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._isFeatured {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._modelPrivacy {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._realmCredits {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CreatorProfile, rhs: Proto_CreatorProfile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._creatorUid != rhs_storage._creatorUid {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._bio != rhs_storage._bio {return false}
        if _storage._photoURL != rhs_storage._photoURL {return false}
        if _storage._isPrivate != rhs_storage._isPrivate {return false}
        if _storage._karma != rhs_storage._karma {return false}
        if _storage._inWaitingList != rhs_storage._inWaitingList {return false}
        if _storage._maxInvite != rhs_storage._maxInvite {return false}
        if _storage._usedInvite != rhs_storage._usedInvite {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._isNpc != rhs_storage._isNpc {return false}
        if _storage._isDeleted != rhs_storage._isDeleted {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._huddleKarma != rhs_storage._huddleKarma {return false}
        if _storage._subscriptionTier != rhs_storage._subscriptionTier {return false}
        if _storage._subscriptionExpirationDate != rhs_storage._subscriptionExpirationDate {return false}
        if _storage._subscriptionCredits != rhs_storage._subscriptionCredits {return false}
        if _storage._subscriptionTrainingCredits != rhs_storage._subscriptionTrainingCredits {return false}
        if _storage._isFeatured != rhs_storage._isFeatured {return false}
        if _storage._modelPrivacy != rhs_storage._modelPrivacy {return false}
        if _storage._realmCredits != rhs_storage._realmCredits {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CreatorProfiles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatorProfiles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CreatorProfiles, rhs: Proto_CreatorProfiles) -> Bool {
    if lhs.profiles != rhs.profiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
