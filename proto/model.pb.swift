// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Proto_ModelState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case initial // = 0
  case training // = 1
  case trained // = 2
  case failed // = 3
  case unknown // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .initial
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .initial
    case 1: self = .training
    case 2: self = .trained
    case 3: self = .failed
    case 4: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .initial: return 0
    case .training: return 1
    case .trained: return 2
    case .failed: return 3
    case .unknown: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_ModelState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_ModelState] = [
    .initial,
    .training,
    .trained,
    .failed,
    .unknown,
  ]
}

#endif  // swift(>=4.2)

public struct Proto_Model {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uid: String {
    get {return _uid ?? String()}
    set {_uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  public var hasUid: Bool {return self._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  public mutating func clearUid() {self._uid = nil}

  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var version: Double {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var modelType: Proto_ModelType {
    get {return _modelType ?? .general}
    set {_modelType = newValue}
  }
  /// Returns true if `modelType` has been explicitly set.
  public var hasModelType: Bool {return self._modelType != nil}
  /// Clears the value of `modelType`. Subsequent reads from it will return its default value.
  public mutating func clearModelType() {self._modelType = nil}

  public var modelState: Proto_ModelState {
    get {return _modelState ?? .initial}
    set {_modelState = newValue}
  }
  /// Returns true if `modelState` has been explicitly set.
  public var hasModelState: Bool {return self._modelState != nil}
  /// Clears the value of `modelState`. Subsequent reads from it will return its default value.
  public mutating func clearModelState() {self._modelState = nil}

  public var storagePath: String {
    get {return _storagePath ?? String()}
    set {_storagePath = newValue}
  }
  /// Returns true if `storagePath` has been explicitly set.
  public var hasStoragePath: Bool {return self._storagePath != nil}
  /// Clears the value of `storagePath`. Subsequent reads from it will return its default value.
  public mutating func clearStoragePath() {self._storagePath = nil}

  public var promptNegative: String {
    get {return _promptNegative ?? String()}
    set {_promptNegative = newValue}
  }
  /// Returns true if `promptNegative` has been explicitly set.
  public var hasPromptNegative: Bool {return self._promptNegative != nil}
  /// Clears the value of `promptNegative`. Subsequent reads from it will return its default value.
  public mutating func clearPromptNegative() {self._promptNegative = nil}

  public var trainingScore: Double {
    get {return _trainingScore ?? 0}
    set {_trainingScore = newValue}
  }
  /// Returns true if `trainingScore` has been explicitly set.
  public var hasTrainingScore: Bool {return self._trainingScore != nil}
  /// Clears the value of `trainingScore`. Subsequent reads from it will return its default value.
  public mutating func clearTrainingScore() {self._trainingScore = nil}

  public var inferenceScore: Double {
    get {return _inferenceScore ?? 0}
    set {_inferenceScore = newValue}
  }
  /// Returns true if `inferenceScore` has been explicitly set.
  public var hasInferenceScore: Bool {return self._inferenceScore != nil}
  /// Clears the value of `inferenceScore`. Subsequent reads from it will return its default value.
  public mutating func clearInferenceScore() {self._inferenceScore = nil}

  public var commitHash: String {
    get {return _commitHash ?? String()}
    set {_commitHash = newValue}
  }
  /// Returns true if `commitHash` has been explicitly set.
  public var hasCommitHash: Bool {return self._commitHash != nil}
  /// Clears the value of `commitHash`. Subsequent reads from it will return its default value.
  public mutating func clearCommitHash() {self._commitHash = nil}

  public var predictedToken: String {
    get {return _predictedToken ?? String()}
    set {_predictedToken = newValue}
  }
  /// Returns true if `predictedToken` has been explicitly set.
  public var hasPredictedToken: Bool {return self._predictedToken != nil}
  /// Clears the value of `predictedToken`. Subsequent reads from it will return its default value.
  public mutating func clearPredictedToken() {self._predictedToken = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _uid: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _version: Double? = nil
  fileprivate var _modelType: Proto_ModelType? = nil
  fileprivate var _modelState: Proto_ModelState? = nil
  fileprivate var _storagePath: String? = nil
  fileprivate var _promptNegative: String? = nil
  fileprivate var _trainingScore: Double? = nil
  fileprivate var _inferenceScore: Double? = nil
  fileprivate var _commitHash: String? = nil
  fileprivate var _predictedToken: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_ModelState: @unchecked Sendable {}
extension Proto_Model: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ModelState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INITIAL"),
    1: .same(proto: "TRAINING"),
    2: .same(proto: "TRAINED"),
    3: .same(proto: "FAILED"),
    4: .same(proto: "UNKNOWN"),
  ]
}

extension Proto_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Model"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "description"),
    3: .same(proto: "version"),
    4: .same(proto: "modelType"),
    5: .same(proto: "modelState"),
    6: .same(proto: "storagePath"),
    7: .same(proto: "promptNegative"),
    8: .same(proto: "trainingScore"),
    9: .same(proto: "inferenceScore"),
    10: .same(proto: "commitHash"),
    11: .same(proto: "predictedToken"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._uid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._version) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._modelType) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._modelState) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._storagePath) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._promptNegative) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._trainingScore) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self._inferenceScore) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._commitHash) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._predictedToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._modelType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._modelState {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._storagePath {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._promptNegative {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._trainingScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._inferenceScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._commitHash {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._predictedToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Model, rhs: Proto_Model) -> Bool {
    if lhs._uid != rhs._uid {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._version != rhs._version {return false}
    if lhs._modelType != rhs._modelType {return false}
    if lhs._modelState != rhs._modelState {return false}
    if lhs._storagePath != rhs._storagePath {return false}
    if lhs._promptNegative != rhs._promptNegative {return false}
    if lhs._trainingScore != rhs._trainingScore {return false}
    if lhs._inferenceScore != rhs._inferenceScore {return false}
    if lhs._commitHash != rhs._commitHash {return false}
    if lhs._predictedToken != rhs._predictedToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
