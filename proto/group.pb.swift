// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Proto_Groups {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var groups: [Proto_Group] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Group {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique name that identifies the group.
  public var name: String = String()

  /// The unique id that identifies the thought.
  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  /// The original author uid that starts the group.
  public var creatorUid: String {
    get {return _creatorUid ?? String()}
    set {_creatorUid = newValue}
  }
  /// Returns true if `creatorUid` has been explicitly set.
  public var hasCreatorUid: Bool {return self._creatorUid != nil}
  /// Clears the value of `creatorUid`. Subsequent reads from it will return its default value.
  public mutating func clearCreatorUid() {self._creatorUid = nil}

  /// Tags of the group, editable by author only
  public var tags: [String] = []

  /// Number of followers
  public var numFollowers: Int64 {
    get {return _numFollowers ?? 0}
    set {_numFollowers = newValue}
  }
  /// Returns true if `numFollowers` has been explicitly set.
  public var hasNumFollowers: Bool {return self._numFollowers != nil}
  /// Clears the value of `numFollowers`. Subsequent reads from it will return its default value.
  public mutating func clearNumFollowers() {self._numFollowers = nil}

  /// Number of likes
  public var numLikes: Int64 {
    get {return _numLikes ?? 0}
    set {_numLikes = newValue}
  }
  /// Returns true if `numLikes` has been explicitly set.
  public var hasNumLikes: Bool {return self._numLikes != nil}
  /// Clears the value of `numLikes`. Subsequent reads from it will return its default value.
  public mutating func clearNumLikes() {self._numLikes = nil}

  /// Number of threads
  public var numThreads: Int64 {
    get {return _numThreads ?? 0}
    set {_numThreads = newValue}
  }
  /// Returns true if `numThreads` has been explicitly set.
  public var hasNumThreads: Bool {return self._numThreads != nil}
  /// Clears the value of `numThreads`. Subsequent reads from it will return its default value.
  public mutating func clearNumThreads() {self._numThreads = nil}

  /// Karma score of the place
  public var placeLatitude: Double {
    get {return _placeLatitude ?? 0}
    set {_placeLatitude = newValue}
  }
  /// Returns true if `placeLatitude` has been explicitly set.
  public var hasPlaceLatitude: Bool {return self._placeLatitude != nil}
  /// Clears the value of `placeLatitude`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceLatitude() {self._placeLatitude = nil}

  /// Karma score of the place
  public var placeLongitude: Double {
    get {return _placeLongitude ?? 0}
    set {_placeLongitude = newValue}
  }
  /// Returns true if `placeLongitude` has been explicitly set.
  public var hasPlaceLongitude: Bool {return self._placeLongitude != nil}
  /// Clears the value of `placeLongitude`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceLongitude() {self._placeLongitude = nil}

  /// A place name tag to the place
  public var googlePlaceID: String {
    get {return _googlePlaceID ?? String()}
    set {_googlePlaceID = newValue}
  }
  /// Returns true if `googlePlaceID` has been explicitly set.
  public var hasGooglePlaceID: Bool {return self._googlePlaceID != nil}
  /// Clears the value of `googlePlaceID`. Subsequent reads from it will return its default value.
  public mutating func clearGooglePlaceID() {self._googlePlaceID = nil}

  /// The display name, which has less restrictions than the group name
  public var displayName: String {
    get {return _displayName ?? String()}
    set {_displayName = newValue}
  }
  /// Returns true if `displayName` has been explicitly set.
  public var hasDisplayName: Bool {return self._displayName != nil}
  /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
  public mutating func clearDisplayName() {self._displayName = nil}

  /// Private Group
  public var isPrivate: Bool {
    get {return _isPrivate ?? false}
    set {_isPrivate = newValue}
  }
  /// Returns true if `isPrivate` has been explicitly set.
  public var hasIsPrivate: Bool {return self._isPrivate != nil}
  /// Clears the value of `isPrivate`. Subsequent reads from it will return its default value.
  public mutating func clearIsPrivate() {self._isPrivate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _description_p: String? = nil
  fileprivate var _creatorUid: String? = nil
  fileprivate var _numFollowers: Int64? = nil
  fileprivate var _numLikes: Int64? = nil
  fileprivate var _numThreads: Int64? = nil
  fileprivate var _placeLatitude: Double? = nil
  fileprivate var _placeLongitude: Double? = nil
  fileprivate var _googlePlaceID: String? = nil
  fileprivate var _displayName: String? = nil
  fileprivate var _isPrivate: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_Groups: @unchecked Sendable {}
extension Proto_Group: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Groups: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Groups"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "groups"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.groups) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Groups, rhs: Proto_Groups) -> Bool {
    if lhs.groups != rhs.groups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Group: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Group"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .same(proto: "creatorUid"),
    4: .same(proto: "tags"),
    5: .same(proto: "numFollowers"),
    6: .same(proto: "numLikes"),
    7: .same(proto: "numThreads"),
    8: .same(proto: "placeLatitude"),
    9: .same(proto: "placeLongitude"),
    10: .same(proto: "googlePlaceID"),
    11: .same(proto: "displayName"),
    12: .same(proto: "isPrivate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._creatorUid) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self._numFollowers) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self._numLikes) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self._numThreads) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._placeLatitude) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self._placeLongitude) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._googlePlaceID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._displayName) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._isPrivate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._creatorUid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 4)
    }
    try { if let v = self._numFollowers {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._numLikes {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._numThreads {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._placeLatitude {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._placeLongitude {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._googlePlaceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._displayName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._isPrivate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Group, rhs: Proto_Group) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._creatorUid != rhs._creatorUid {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs._numFollowers != rhs._numFollowers {return false}
    if lhs._numLikes != rhs._numLikes {return false}
    if lhs._numThreads != rhs._numThreads {return false}
    if lhs._placeLatitude != rhs._placeLatitude {return false}
    if lhs._placeLongitude != rhs._placeLongitude {return false}
    if lhs._googlePlaceID != rhs._googlePlaceID {return false}
    if lhs._displayName != rhs._displayName {return false}
    if lhs._isPrivate != rhs._isPrivate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
