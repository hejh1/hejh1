// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: post.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Proto_Posts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var posts: [Proto_Post] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Post {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique id that identifies the post.
  public var postID: String {
    get {return _storage._postID}
    set {_uniqueStorage()._postID = newValue}
  }

  /// The unique id that identifies the thought.
  public var thoughtID: [String] {
    get {return _storage._thoughtID}
    set {_uniqueStorage()._thoughtID = newValue}
  }

  /// The unique id that identifies the group that post belongs to.
  public var groupID: String {
    get {return _storage._groupID ?? String()}
    set {_uniqueStorage()._groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  public var hasGroupID: Bool {return _storage._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  public mutating func clearGroupID() {_uniqueStorage()._groupID = nil}

  /// The start time of the post.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  /// The original author uid that starts the post.
  public var uid: String {
    get {return _storage._uid ?? String()}
    set {_uniqueStorage()._uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  public var hasUid: Bool {return _storage._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  public mutating func clearUid() {_uniqueStorage()._uid = nil}

  /// Post state. Currently supported state: timeless, deleting
  public var state: String {
    get {return _storage._state ?? String()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  /// The language preference of the post
  public var language: String {
    get {return _storage._language ?? String()}
    set {_uniqueStorage()._language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  public var hasLanguage: Bool {return _storage._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  public mutating func clearLanguage() {_uniqueStorage()._language = nil}

  /// Title of the post, editable by author only
  public var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() {_uniqueStorage()._title = nil}

  /// Descriptions of the post, editable by author only
  public var descriptions: String {
    get {return _storage._descriptions ?? String()}
    set {_uniqueStorage()._descriptions = newValue}
  }
  /// Returns true if `descriptions` has been explicitly set.
  public var hasDescriptions: Bool {return _storage._descriptions != nil}
  /// Clears the value of `descriptions`. Subsequent reads from it will return its default value.
  public mutating func clearDescriptions() {_uniqueStorage()._descriptions = nil}

  /// Hashtags of the post, editable by author only
  public var hashtags: [String] {
    get {return _storage._hashtags}
    set {_uniqueStorage()._hashtags = newValue}
  }

  /// Color of the post, editable by author only
  public var color: String {
    get {return _storage._color ?? String()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {_uniqueStorage()._color = nil}

  /// Total likes count
  public var totalLikeCount: Int64 {
    get {return _storage._totalLikeCount ?? 0}
    set {_uniqueStorage()._totalLikeCount = newValue}
  }
  /// Returns true if `totalLikeCount` has been explicitly set.
  public var hasTotalLikeCount: Bool {return _storage._totalLikeCount != nil}
  /// Clears the value of `totalLikeCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalLikeCount() {_uniqueStorage()._totalLikeCount = nil}

  /// Total shares count
  public var totalShareCount: Int64 {
    get {return _storage._totalShareCount ?? 0}
    set {_uniqueStorage()._totalShareCount = newValue}
  }
  /// Returns true if `totalShareCount` has been explicitly set.
  public var hasTotalShareCount: Bool {return _storage._totalShareCount != nil}
  /// Clears the value of `totalShareCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalShareCount() {_uniqueStorage()._totalShareCount = nil}

  /// Total remix count
  public var totalRemixCount: Int64 {
    get {return _storage._totalRemixCount ?? 0}
    set {_uniqueStorage()._totalRemixCount = newValue}
  }
  /// Returns true if `totalRemixCount` has been explicitly set.
  public var hasTotalRemixCount: Bool {return _storage._totalRemixCount != nil}
  /// Clears the value of `totalRemixCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalRemixCount() {_uniqueStorage()._totalRemixCount = nil}

  /// App bundle identifier
  public var appID: String {
    get {return _storage._appID ?? String()}
    set {_uniqueStorage()._appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
  public mutating func clearAppID() {_uniqueStorage()._appID = nil}

  /// Karma score of the post
  public var karma: Double {
    get {return _storage._karma ?? 0}
    set {_uniqueStorage()._karma = newValue}
  }
  /// Returns true if `karma` has been explicitly set.
  public var hasKarma: Bool {return _storage._karma != nil}
  /// Clears the value of `karma`. Subsequent reads from it will return its default value.
  public mutating func clearKarma() {_uniqueStorage()._karma = nil}

  /// A score representing priority in feed
  public var feedScore: Double {
    get {return _storage._feedScore ?? 0}
    set {_uniqueStorage()._feedScore = newValue}
  }
  /// Returns true if `feedScore` has been explicitly set.
  public var hasFeedScore: Bool {return _storage._feedScore != nil}
  /// Clears the value of `feedScore`. Subsequent reads from it will return its default value.
  public mutating func clearFeedScore() {_uniqueStorage()._feedScore = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_Posts: @unchecked Sendable {}
extension Proto_Post: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Posts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Posts"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "posts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.posts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.posts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.posts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Posts, rhs: Proto_Posts) -> Bool {
    if lhs.posts != rhs.posts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Post: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Post"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postID"),
    2: .same(proto: "thoughtID"),
    3: .same(proto: "groupID"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "uid"),
    6: .same(proto: "state"),
    7: .same(proto: "language"),
    8: .same(proto: "title"),
    9: .same(proto: "descriptions"),
    10: .same(proto: "hashtags"),
    11: .same(proto: "color"),
    12: .same(proto: "totalLikeCount"),
    13: .same(proto: "totalShareCount"),
    14: .same(proto: "totalRemixCount"),
    15: .same(proto: "appID"),
    16: .same(proto: "karma"),
    17: .same(proto: "feedScore"),
  ]

  fileprivate class _StorageClass {
    var _postID: String = String()
    var _thoughtID: [String] = []
    var _groupID: String? = nil
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _uid: String? = nil
    var _state: String? = nil
    var _language: String? = nil
    var _title: String? = nil
    var _descriptions: String? = nil
    var _hashtags: [String] = []
    var _color: String? = nil
    var _totalLikeCount: Int64? = nil
    var _totalShareCount: Int64? = nil
    var _totalRemixCount: Int64? = nil
    var _appID: String? = nil
    var _karma: Double? = nil
    var _feedScore: Double? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _postID = source._postID
      _thoughtID = source._thoughtID
      _groupID = source._groupID
      _timestamp = source._timestamp
      _uid = source._uid
      _state = source._state
      _language = source._language
      _title = source._title
      _descriptions = source._descriptions
      _hashtags = source._hashtags
      _color = source._color
      _totalLikeCount = source._totalLikeCount
      _totalShareCount = source._totalShareCount
      _totalRemixCount = source._totalRemixCount
      _appID = source._appID
      _karma = source._karma
      _feedScore = source._feedScore
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._postID) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._thoughtID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._groupID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._uid) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._state) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._descriptions) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._hashtags) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._color) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._totalLikeCount) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._totalShareCount) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._totalRemixCount) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._appID) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._karma) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._feedScore) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._postID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._postID, fieldNumber: 1)
      }
      if !_storage._thoughtID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._thoughtID, fieldNumber: 2)
      }
      try { if let v = _storage._groupID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._uid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._state {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._descriptions {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      if !_storage._hashtags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._hashtags, fieldNumber: 10)
      }
      try { if let v = _storage._color {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._totalLikeCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._totalShareCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._totalRemixCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._appID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._karma {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._feedScore {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Post, rhs: Proto_Post) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._postID != rhs_storage._postID {return false}
        if _storage._thoughtID != rhs_storage._thoughtID {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._descriptions != rhs_storage._descriptions {return false}
        if _storage._hashtags != rhs_storage._hashtags {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._totalLikeCount != rhs_storage._totalLikeCount {return false}
        if _storage._totalShareCount != rhs_storage._totalShareCount {return false}
        if _storage._totalRemixCount != rhs_storage._totalRemixCount {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._karma != rhs_storage._karma {return false}
        if _storage._feedScore != rhs_storage._feedScore {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
