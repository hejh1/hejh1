//nolint

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: prompt.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelType int32

const (
	ModelType_GENERAL      ModelType = 0
	ModelType_PERSONAL     ModelType = 1
	ModelType_DELIBERATE   ModelType = 2
	ModelType_PROTOGEN     ModelType = 3
	ModelType_OPENJOURNEY  ModelType = 4
	ModelType_PORTRAITPLUS ModelType = 5
	ModelType_DREAMSHAPER  ModelType = 6
	ModelType_EIMISANIME   ModelType = 7
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "GENERAL",
		1: "PERSONAL",
		2: "DELIBERATE",
		3: "PROTOGEN",
		4: "OPENJOURNEY",
		5: "PORTRAITPLUS",
		6: "DREAMSHAPER",
		7: "EIMISANIME",
	}
	ModelType_value = map[string]int32{
		"GENERAL":      0,
		"PERSONAL":     1,
		"DELIBERATE":   2,
		"PROTOGEN":     3,
		"OPENJOURNEY":  4,
		"PORTRAITPLUS": 5,
		"DREAMSHAPER":  6,
		"EIMISANIME":   7,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[0].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[0]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{0}
}

type GenerationSteps int32

const (
	GenerationSteps_STEPS_NORMAL   GenerationSteps = 0
	GenerationSteps_STEPS_EXTENDED GenerationSteps = 1
)

// Enum value maps for GenerationSteps.
var (
	GenerationSteps_name = map[int32]string{
		0: "STEPS_NORMAL",
		1: "STEPS_EXTENDED",
	}
	GenerationSteps_value = map[string]int32{
		"STEPS_NORMAL":   0,
		"STEPS_EXTENDED": 1,
	}
)

func (x GenerationSteps) Enum() *GenerationSteps {
	p := new(GenerationSteps)
	*p = x
	return p
}

func (x GenerationSteps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationSteps) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[1].Descriptor()
}

func (GenerationSteps) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[1]
}

func (x GenerationSteps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationSteps.Descriptor instead.
func (GenerationSteps) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{1}
}

type GenerationQuality int32

const (
	GenerationQuality_QUALITY_LOW    GenerationQuality = 0
	GenerationQuality_QUALITY_MEDIUM GenerationQuality = 1
	GenerationQuality_QUALITY_HIGH   GenerationQuality = 2
)

// Enum value maps for GenerationQuality.
var (
	GenerationQuality_name = map[int32]string{
		0: "QUALITY_LOW",
		1: "QUALITY_MEDIUM",
		2: "QUALITY_HIGH",
	}
	GenerationQuality_value = map[string]int32{
		"QUALITY_LOW":    0,
		"QUALITY_MEDIUM": 1,
		"QUALITY_HIGH":   2,
	}
)

func (x GenerationQuality) Enum() *GenerationQuality {
	p := new(GenerationQuality)
	*p = x
	return p
}

func (x GenerationQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[2].Descriptor()
}

func (GenerationQuality) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[2]
}

func (x GenerationQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationQuality.Descriptor instead.
func (GenerationQuality) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{2}
}

// 1:1, 4:5, 9:16, 4:3, 5:3
type AspectRatio int32

const (
	AspectRatio_RATIO_1_1  AspectRatio = 0
	AspectRatio_RATIO_4_5  AspectRatio = 1
	AspectRatio_RATIO_9_16 AspectRatio = 2
	AspectRatio_RATIO_4_3  AspectRatio = 3
	AspectRatio_RATIO_5_3  AspectRatio = 4
)

// Enum value maps for AspectRatio.
var (
	AspectRatio_name = map[int32]string{
		0: "RATIO_1_1",
		1: "RATIO_4_5",
		2: "RATIO_9_16",
		3: "RATIO_4_3",
		4: "RATIO_5_3",
	}
	AspectRatio_value = map[string]int32{
		"RATIO_1_1":  0,
		"RATIO_4_5":  1,
		"RATIO_9_16": 2,
		"RATIO_4_3":  3,
		"RATIO_5_3":  4,
	}
)

func (x AspectRatio) Enum() *AspectRatio {
	p := new(AspectRatio)
	*p = x
	return p
}

func (x AspectRatio) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AspectRatio) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[3].Descriptor()
}

func (AspectRatio) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[3]
}

func (x AspectRatio) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AspectRatio.Descriptor instead.
func (AspectRatio) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{3}
}

type GuidanceScale int32

const (
	GuidanceScale_SCALE_LOW    GuidanceScale = 0
	GuidanceScale_SCALE_MEDIUM GuidanceScale = 1
	GuidanceScale_SCALE_HIGH   GuidanceScale = 2
)

// Enum value maps for GuidanceScale.
var (
	GuidanceScale_name = map[int32]string{
		0: "SCALE_LOW",
		1: "SCALE_MEDIUM",
		2: "SCALE_HIGH",
	}
	GuidanceScale_value = map[string]int32{
		"SCALE_LOW":    0,
		"SCALE_MEDIUM": 1,
		"SCALE_HIGH":   2,
	}
)

func (x GuidanceScale) Enum() *GuidanceScale {
	p := new(GuidanceScale)
	*p = x
	return p
}

func (x GuidanceScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidanceScale) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[4].Descriptor()
}

func (GuidanceScale) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[4]
}

func (x GuidanceScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidanceScale.Descriptor instead.
func (GuidanceScale) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{4}
}

type ControlType int32

const (
	ControlType_NONE ControlType = 0
	ControlType_POSE ControlType = 1
)

// Enum value maps for ControlType.
var (
	ControlType_name = map[int32]string{
		0: "NONE",
		1: "POSE",
	}
	ControlType_value = map[string]int32{
		"NONE": 0,
		"POSE": 1,
	}
)

func (x ControlType) Enum() *ControlType {
	p := new(ControlType)
	*p = x
	return p
}

func (x ControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[5].Descriptor()
}

func (ControlType) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[5]
}

func (x ControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlType.Descriptor instead.
func (ControlType) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{5}
}

type RealmPostType int32

const (
	RealmPostType_DAILY    RealmPostType = 0
	RealmPostType_CUSTOM   RealmPostType = 1
	RealmPostType_REFIT    RealmPostType = 2
	RealmPostType_FEATURED RealmPostType = 3
)

// Enum value maps for RealmPostType.
var (
	RealmPostType_name = map[int32]string{
		0: "DAILY",
		1: "CUSTOM",
		2: "REFIT",
		3: "FEATURED",
	}
	RealmPostType_value = map[string]int32{
		"DAILY":    0,
		"CUSTOM":   1,
		"REFIT":    2,
		"FEATURED": 3,
	}
)

func (x RealmPostType) Enum() *RealmPostType {
	p := new(RealmPostType)
	*p = x
	return p
}

func (x RealmPostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealmPostType) Descriptor() protoreflect.EnumDescriptor {
	return file_prompt_proto_enumTypes[6].Descriptor()
}

func (RealmPostType) Type() protoreflect.EnumType {
	return &file_prompt_proto_enumTypes[6]
}

func (x RealmPostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealmPostType.Descriptor instead.
func (RealmPostType) EnumDescriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{6}
}

type PromptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                   *string                `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	AppID                 *string                `protobuf:"bytes,2,opt,name=appID,proto3,oneof" json:"appID,omitempty"`
	RequestID             *string                `protobuf:"bytes,3,opt,name=requestID,proto3,oneof" json:"requestID,omitempty"`
	PromptPositive        *string                `protobuf:"bytes,4,opt,name=promptPositive,proto3,oneof" json:"promptPositive,omitempty"`
	PromptNegative        *string                `protobuf:"bytes,5,opt,name=promptNegative,proto3,oneof" json:"promptNegative,omitempty"`
	AllowNsfw             *bool                  `protobuf:"varint,6,opt,name=allowNsfw,proto3,oneof" json:"allowNsfw,omitempty"`
	Timestamp             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Type                  *string                `protobuf:"bytes,8,opt,name=type,proto3,oneof" json:"type,omitempty"`
	NotificationID        *string                `protobuf:"bytes,9,opt,name=notificationID,proto3,oneof" json:"notificationID,omitempty"`
	ModelType             *ModelType             `protobuf:"varint,10,opt,name=modelType,proto3,enum=proto.ModelType,oneof" json:"modelType,omitempty"`
	GenerationSteps       *GenerationSteps       `protobuf:"varint,11,opt,name=generationSteps,proto3,enum=proto.GenerationSteps,oneof" json:"generationSteps,omitempty"`
	GenerationQuality     *GenerationQuality     `protobuf:"varint,12,opt,name=generationQuality,proto3,enum=proto.GenerationQuality,oneof" json:"generationQuality,omitempty"`
	AspectRatio           *AspectRatio           `protobuf:"varint,13,opt,name=aspectRatio,proto3,enum=proto.AspectRatio,oneof" json:"aspectRatio,omitempty"`
	GuidanceScale         *GuidanceScale         `protobuf:"varint,14,opt,name=guidanceScale,proto3,enum=proto.GuidanceScale,oneof" json:"guidanceScale,omitempty"`
	StartImage            *string                `protobuf:"bytes,15,opt,name=startImage,proto3,oneof" json:"startImage,omitempty"`
	ControlStrength       *int64                 `protobuf:"varint,16,opt,name=controlStrength,proto3,oneof" json:"controlStrength,omitempty"`
	HitsToSkip            *int64                 `protobuf:"varint,17,opt,name=hitsToSkip,proto3,oneof" json:"hitsToSkip,omitempty"`
	MaskImage             *string                `protobuf:"bytes,18,opt,name=maskImage,proto3,oneof" json:"maskImage,omitempty"`
	BackendReleaseVersion *string                `protobuf:"bytes,19,opt,name=backendReleaseVersion,proto3,oneof" json:"backendReleaseVersion,omitempty"`
	AppVersion            *string                `protobuf:"bytes,20,opt,name=appVersion,proto3,oneof" json:"appVersion,omitempty"`
	ControlType           *ControlType           `protobuf:"varint,21,opt,name=controlType,proto3,enum=proto.ControlType,oneof" json:"controlType,omitempty"`
	ControlSource         *string                `protobuf:"bytes,22,opt,name=controlSource,proto3,oneof" json:"controlSource,omitempty"`
}

func (x *PromptRequest) Reset() {
	*x = PromptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptRequest) ProtoMessage() {}

func (x *PromptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptRequest.ProtoReflect.Descriptor instead.
func (*PromptRequest) Descriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{0}
}

func (x *PromptRequest) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *PromptRequest) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *PromptRequest) GetRequestID() string {
	if x != nil && x.RequestID != nil {
		return *x.RequestID
	}
	return ""
}

func (x *PromptRequest) GetPromptPositive() string {
	if x != nil && x.PromptPositive != nil {
		return *x.PromptPositive
	}
	return ""
}

func (x *PromptRequest) GetPromptNegative() string {
	if x != nil && x.PromptNegative != nil {
		return *x.PromptNegative
	}
	return ""
}

func (x *PromptRequest) GetAllowNsfw() bool {
	if x != nil && x.AllowNsfw != nil {
		return *x.AllowNsfw
	}
	return false
}

func (x *PromptRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PromptRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PromptRequest) GetNotificationID() string {
	if x != nil && x.NotificationID != nil {
		return *x.NotificationID
	}
	return ""
}

func (x *PromptRequest) GetModelType() ModelType {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ModelType_GENERAL
}

func (x *PromptRequest) GetGenerationSteps() GenerationSteps {
	if x != nil && x.GenerationSteps != nil {
		return *x.GenerationSteps
	}
	return GenerationSteps_STEPS_NORMAL
}

func (x *PromptRequest) GetGenerationQuality() GenerationQuality {
	if x != nil && x.GenerationQuality != nil {
		return *x.GenerationQuality
	}
	return GenerationQuality_QUALITY_LOW
}

func (x *PromptRequest) GetAspectRatio() AspectRatio {
	if x != nil && x.AspectRatio != nil {
		return *x.AspectRatio
	}
	return AspectRatio_RATIO_1_1
}

func (x *PromptRequest) GetGuidanceScale() GuidanceScale {
	if x != nil && x.GuidanceScale != nil {
		return *x.GuidanceScale
	}
	return GuidanceScale_SCALE_LOW
}

func (x *PromptRequest) GetStartImage() string {
	if x != nil && x.StartImage != nil {
		return *x.StartImage
	}
	return ""
}

func (x *PromptRequest) GetControlStrength() int64 {
	if x != nil && x.ControlStrength != nil {
		return *x.ControlStrength
	}
	return 0
}

func (x *PromptRequest) GetHitsToSkip() int64 {
	if x != nil && x.HitsToSkip != nil {
		return *x.HitsToSkip
	}
	return 0
}

func (x *PromptRequest) GetMaskImage() string {
	if x != nil && x.MaskImage != nil {
		return *x.MaskImage
	}
	return ""
}

func (x *PromptRequest) GetBackendReleaseVersion() string {
	if x != nil && x.BackendReleaseVersion != nil {
		return *x.BackendReleaseVersion
	}
	return ""
}

func (x *PromptRequest) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *PromptRequest) GetControlType() ControlType {
	if x != nil && x.ControlType != nil {
		return *x.ControlType
	}
	return ControlType_NONE
}

func (x *PromptRequest) GetControlSource() string {
	if x != nil && x.ControlSource != nil {
		return *x.ControlSource
	}
	return ""
}

type Prompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   *string            `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description            *string            `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Date                   *int64             `protobuf:"varint,3,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Seed                   *int64             `protobuf:"varint,4,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	PromptPositive         *string            `protobuf:"bytes,5,opt,name=promptPositive,proto3,oneof" json:"promptPositive,omitempty"`
	PromptNegative         *string            `protobuf:"bytes,6,opt,name=promptNegative,proto3,oneof" json:"promptNegative,omitempty"`
	SampleImagePath        []string           `protobuf:"bytes,7,rep,name=sampleImagePath,proto3" json:"sampleImagePath,omitempty"`
	IsExample              *bool              `protobuf:"varint,8,opt,name=isExample,proto3,oneof" json:"isExample,omitempty"`
	ModelType              *ModelType         `protobuf:"varint,10,opt,name=modelType,proto3,enum=proto.ModelType,oneof" json:"modelType,omitempty"`
	GenerationSteps        *GenerationSteps   `protobuf:"varint,11,opt,name=generationSteps,proto3,enum=proto.GenerationSteps,oneof" json:"generationSteps,omitempty"`
	GenerationQuality      *GenerationQuality `protobuf:"varint,12,opt,name=generationQuality,proto3,enum=proto.GenerationQuality,oneof" json:"generationQuality,omitempty"`
	AspectRatio            *AspectRatio       `protobuf:"varint,13,opt,name=aspectRatio,proto3,enum=proto.AspectRatio,oneof" json:"aspectRatio,omitempty"`
	GuidanceScale          *GuidanceScale     `protobuf:"varint,14,opt,name=guidanceScale,proto3,enum=proto.GuidanceScale,oneof" json:"guidanceScale,omitempty"`
	StartImage             *string            `protobuf:"bytes,15,opt,name=startImage,proto3,oneof" json:"startImage,omitempty"`
	ControlStrength        *int64             `protobuf:"varint,16,opt,name=controlStrength,proto3,oneof" json:"controlStrength,omitempty"`
	GenerationCount        *int64             `protobuf:"varint,17,opt,name=generationCount,proto3,oneof" json:"generationCount,omitempty"`
	Tags                   []string           `protobuf:"bytes,18,rep,name=tags,proto3" json:"tags,omitempty"`
	MaskImage              *string            `protobuf:"bytes,19,opt,name=maskImage,proto3,oneof" json:"maskImage,omitempty"`
	ModifierStrength       *float32           `protobuf:"fixed32,20,opt,name=modifierStrength,proto3,oneof" json:"modifierStrength,omitempty"`
	ControlType            *ControlType       `protobuf:"varint,21,opt,name=controlType,proto3,enum=proto.ControlType,oneof" json:"controlType,omitempty"`
	ControlSource          *string            `protobuf:"bytes,22,opt,name=controlSource,proto3,oneof" json:"controlSource,omitempty"`
	Hidden                 *bool              `protobuf:"varint,23,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	Timestamp              *float64           `protobuf:"fixed64,24,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Uid                    *string            `protobuf:"bytes,25,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	PostType               *RealmPostType     `protobuf:"varint,26,opt,name=postType,proto3,enum=proto.RealmPostType,oneof" json:"postType,omitempty"`
	ThreadID               *string            `protobuf:"bytes,27,opt,name=threadID,proto3,oneof" json:"threadID,omitempty"`
	PromptID               *string            `protobuf:"bytes,28,opt,name=promptID,proto3,oneof" json:"promptID,omitempty"`
	EnforcedPromptNegative *string            `protobuf:"bytes,29,opt,name=enforcedPromptNegative,proto3,oneof" json:"enforcedPromptNegative,omitempty"`
}

func (x *Prompt) Reset() {
	*x = Prompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt) ProtoMessage() {}

func (x *Prompt) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt.ProtoReflect.Descriptor instead.
func (*Prompt) Descriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{1}
}

func (x *Prompt) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Prompt) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Prompt) GetDate() int64 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *Prompt) GetSeed() int64 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *Prompt) GetPromptPositive() string {
	if x != nil && x.PromptPositive != nil {
		return *x.PromptPositive
	}
	return ""
}

func (x *Prompt) GetPromptNegative() string {
	if x != nil && x.PromptNegative != nil {
		return *x.PromptNegative
	}
	return ""
}

func (x *Prompt) GetSampleImagePath() []string {
	if x != nil {
		return x.SampleImagePath
	}
	return nil
}

func (x *Prompt) GetIsExample() bool {
	if x != nil && x.IsExample != nil {
		return *x.IsExample
	}
	return false
}

func (x *Prompt) GetModelType() ModelType {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ModelType_GENERAL
}

func (x *Prompt) GetGenerationSteps() GenerationSteps {
	if x != nil && x.GenerationSteps != nil {
		return *x.GenerationSteps
	}
	return GenerationSteps_STEPS_NORMAL
}

func (x *Prompt) GetGenerationQuality() GenerationQuality {
	if x != nil && x.GenerationQuality != nil {
		return *x.GenerationQuality
	}
	return GenerationQuality_QUALITY_LOW
}

func (x *Prompt) GetAspectRatio() AspectRatio {
	if x != nil && x.AspectRatio != nil {
		return *x.AspectRatio
	}
	return AspectRatio_RATIO_1_1
}

func (x *Prompt) GetGuidanceScale() GuidanceScale {
	if x != nil && x.GuidanceScale != nil {
		return *x.GuidanceScale
	}
	return GuidanceScale_SCALE_LOW
}

func (x *Prompt) GetStartImage() string {
	if x != nil && x.StartImage != nil {
		return *x.StartImage
	}
	return ""
}

func (x *Prompt) GetControlStrength() int64 {
	if x != nil && x.ControlStrength != nil {
		return *x.ControlStrength
	}
	return 0
}

func (x *Prompt) GetGenerationCount() int64 {
	if x != nil && x.GenerationCount != nil {
		return *x.GenerationCount
	}
	return 0
}

func (x *Prompt) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Prompt) GetMaskImage() string {
	if x != nil && x.MaskImage != nil {
		return *x.MaskImage
	}
	return ""
}

func (x *Prompt) GetModifierStrength() float32 {
	if x != nil && x.ModifierStrength != nil {
		return *x.ModifierStrength
	}
	return 0
}

func (x *Prompt) GetControlType() ControlType {
	if x != nil && x.ControlType != nil {
		return *x.ControlType
	}
	return ControlType_NONE
}

func (x *Prompt) GetControlSource() string {
	if x != nil && x.ControlSource != nil {
		return *x.ControlSource
	}
	return ""
}

func (x *Prompt) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *Prompt) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Prompt) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Prompt) GetPostType() RealmPostType {
	if x != nil && x.PostType != nil {
		return *x.PostType
	}
	return RealmPostType_DAILY
}

func (x *Prompt) GetThreadID() string {
	if x != nil && x.ThreadID != nil {
		return *x.ThreadID
	}
	return ""
}

func (x *Prompt) GetPromptID() string {
	if x != nil && x.PromptID != nil {
		return *x.PromptID
	}
	return ""
}

func (x *Prompt) GetEnforcedPromptNegative() string {
	if x != nil && x.EnforcedPromptNegative != nil {
		return *x.EnforcedPromptNegative
	}
	return ""
}

type Prompts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompts []*Prompt `protobuf:"bytes,1,rep,name=prompts,proto3" json:"prompts,omitempty"`
}

func (x *Prompts) Reset() {
	*x = Prompts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompts) ProtoMessage() {}

func (x *Prompts) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompts.ProtoReflect.Descriptor instead.
func (*Prompts) Descriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{2}
}

func (x *Prompts) GetPrompts() []*Prompt {
	if x != nil {
		return x.Prompts
	}
	return nil
}

type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []float32 `protobuf:"fixed32,1,rep,packed,name=features,proto3" json:"features,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prompt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_prompt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_prompt_proto_rawDescGZIP(), []int{3}
}

func (x *Features) GetFeatures() []float32 {
	if x != nil {
		return x.Features
	}
	return nil
}

var File_prompt_proto protoreflect.FileDescriptor

var file_prompt_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x0a, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x73, 0x66, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x73, 0x66, 0x77, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x48, 0x0a, 0x52, 0x0f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x0b, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x0c, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x0d, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x68, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x10, 0x52, 0x0a, 0x68, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x6b, 0x69, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x14,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x73, 0x66, 0x77, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x54,
	0x6f, 0x53, 0x6b, 0x69, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xdc,
	0x0c, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x48, 0x08, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x09, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x61,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x48, 0x0a, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x48, 0x0b, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0f, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x48, 0x10, 0x52, 0x10, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x11, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x16, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x16, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x49, 0x44, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x32, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x73, 0x22, 0x26, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2a, 0x88, 0x01, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x4c, 0x49, 0x42, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x47, 0x45, 0x4e, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x4e, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x45, 0x41, 0x4d, 0x53, 0x48, 0x41, 0x50,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x49, 0x4d, 0x49, 0x53, 0x41, 0x4e, 0x49,
	0x4d, 0x45, 0x10, 0x07, 0x2a, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x45, 0x50, 0x53,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x45,
	0x50, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x4a, 0x0a,
	0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x0b, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x5f, 0x34, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f,
	0x39, 0x5f, 0x31, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f,
	0x34, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x35,
	0x5f, 0x33, 0x10, 0x04, 0x2a, 0x40, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x46, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0x90, 0x04, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x13,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x12, 0x48,
	0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64, 0x22, 0x00, 0x42, 0x23, 0x5a,
	0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6f, 0x67, 0x77,
	0x61, 0x79, 0x6c, 0x61, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prompt_proto_rawDescOnce sync.Once
	file_prompt_proto_rawDescData = file_prompt_proto_rawDesc
)

func file_prompt_proto_rawDescGZIP() []byte {
	file_prompt_proto_rawDescOnce.Do(func() {
		file_prompt_proto_rawDescData = protoimpl.X.CompressGZIP(file_prompt_proto_rawDescData)
	})
	return file_prompt_proto_rawDescData
}

var file_prompt_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_prompt_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_prompt_proto_goTypes = []interface{}{
	(ModelType)(0),                // 0: proto.ModelType
	(GenerationSteps)(0),          // 1: proto.GenerationSteps
	(GenerationQuality)(0),        // 2: proto.GenerationQuality
	(AspectRatio)(0),              // 3: proto.AspectRatio
	(GuidanceScale)(0),            // 4: proto.GuidanceScale
	(ControlType)(0),              // 5: proto.ControlType
	(RealmPostType)(0),            // 6: proto.RealmPostType
	(*PromptRequest)(nil),         // 7: proto.PromptRequest
	(*Prompt)(nil),                // 8: proto.Prompt
	(*Prompts)(nil),               // 9: proto.Prompts
	(*Features)(nil),              // 10: proto.Features
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*CreatorProfiles)(nil),       // 12: proto.CreatorProfiles
	(*ResponseFeed)(nil),          // 13: proto.ResponseFeed
}
var file_prompt_proto_depIdxs = []int32{
	11, // 0: proto.PromptRequest.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: proto.PromptRequest.modelType:type_name -> proto.ModelType
	1,  // 2: proto.PromptRequest.generationSteps:type_name -> proto.GenerationSteps
	2,  // 3: proto.PromptRequest.generationQuality:type_name -> proto.GenerationQuality
	3,  // 4: proto.PromptRequest.aspectRatio:type_name -> proto.AspectRatio
	4,  // 5: proto.PromptRequest.guidanceScale:type_name -> proto.GuidanceScale
	5,  // 6: proto.PromptRequest.controlType:type_name -> proto.ControlType
	0,  // 7: proto.Prompt.modelType:type_name -> proto.ModelType
	1,  // 8: proto.Prompt.generationSteps:type_name -> proto.GenerationSteps
	2,  // 9: proto.Prompt.generationQuality:type_name -> proto.GenerationQuality
	3,  // 10: proto.Prompt.aspectRatio:type_name -> proto.AspectRatio
	4,  // 11: proto.Prompt.guidanceScale:type_name -> proto.GuidanceScale
	5,  // 12: proto.Prompt.controlType:type_name -> proto.ControlType
	6,  // 13: proto.Prompt.postType:type_name -> proto.RealmPostType
	8,  // 14: proto.Prompts.prompts:type_name -> proto.Prompt
	7,  // 15: proto.PromptSearch.Echo:input_type -> proto.PromptRequest
	7,  // 16: proto.PromptSearch.SearchImagesFromPrompt:input_type -> proto.PromptRequest
	7,  // 17: proto.PromptSearch.SearchStylesFromPrompt:input_type -> proto.PromptRequest
	7,  // 18: proto.PromptSearch.SearchUsersFromText:input_type -> proto.PromptRequest
	7,  // 19: proto.PromptSearch.SearchPromptHistory:input_type -> proto.PromptRequest
	7,  // 20: proto.PromptSearch.HidePromptFromUser:input_type -> proto.PromptRequest
	7,  // 21: proto.PromptSearch.GetFeaturesForPost:input_type -> proto.PromptRequest
	7,  // 22: proto.PromptSearch.SearchPostsFromPrompt:input_type -> proto.PromptRequest
	7,  // 23: proto.PromptSearch.Echo:output_type -> proto.PromptRequest
	9,  // 24: proto.PromptSearch.SearchImagesFromPrompt:output_type -> proto.Prompts
	9,  // 25: proto.PromptSearch.SearchStylesFromPrompt:output_type -> proto.Prompts
	12, // 26: proto.PromptSearch.SearchUsersFromText:output_type -> proto.CreatorProfiles
	9,  // 27: proto.PromptSearch.SearchPromptHistory:output_type -> proto.Prompts
	8,  // 28: proto.PromptSearch.HidePromptFromUser:output_type -> proto.Prompt
	10, // 29: proto.PromptSearch.GetFeaturesForPost:output_type -> proto.Features
	13, // 30: proto.PromptSearch.SearchPostsFromPrompt:output_type -> proto.ResponseFeed
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_prompt_proto_init() }
func file_prompt_proto_init() {
	if File_prompt_proto != nil {
		return
	}
	file_creator_profile_proto_init()
	file_thread_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prompt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prompt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prompt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prompt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prompt_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_prompt_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prompt_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prompt_proto_goTypes,
		DependencyIndexes: file_prompt_proto_depIdxs,
		EnumInfos:         file_prompt_proto_enumTypes,
		MessageInfos:      file_prompt_proto_msgTypes,
	}.Build()
	File_prompt_proto = out.File
	file_prompt_proto_rawDesc = nil
	file_prompt_proto_goTypes = nil
	file_prompt_proto_depIdxs = nil
}
