// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thread.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///nolint

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Proto_ThreadVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _creationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return self._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {self._creationTime = nil}

  public var creatorUid: String = String()

  public var shareID: String = String()

  public var thoughtID: String = String()

  public var likeCount: Int64 {
    get {return _likeCount ?? 0}
    set {_likeCount = newValue}
  }
  /// Returns true if `likeCount` has been explicitly set.
  public var hasLikeCount: Bool {return self._likeCount != nil}
  /// Clears the value of `likeCount`. Subsequent reads from it will return its default value.
  public mutating func clearLikeCount() {self._likeCount = nil}

  public var remixCount: Int64 {
    get {return _remixCount ?? 0}
    set {_remixCount = newValue}
  }
  /// Returns true if `remixCount` has been explicitly set.
  public var hasRemixCount: Bool {return self._remixCount != nil}
  /// Clears the value of `remixCount`. Subsequent reads from it will return its default value.
  public mutating func clearRemixCount() {self._remixCount = nil}

  public var shareCount: Int64 {
    get {return _shareCount ?? 0}
    set {_shareCount = newValue}
  }
  /// Returns true if `shareCount` has been explicitly set.
  public var hasShareCount: Bool {return self._shareCount != nil}
  /// Clears the value of `shareCount`. Subsequent reads from it will return its default value.
  public mutating func clearShareCount() {self._shareCount = nil}

  public var parentShareID: String {
    get {return _parentShareID ?? String()}
    set {_parentShareID = newValue}
  }
  /// Returns true if `parentShareID` has been explicitly set.
  public var hasParentShareID: Bool {return self._parentShareID != nil}
  /// Clears the value of `parentShareID`. Subsequent reads from it will return its default value.
  public mutating func clearParentShareID() {self._parentShareID = nil}

  public var threadID: String {
    get {return _threadID ?? String()}
    set {_threadID = newValue}
  }
  /// Returns true if `threadID` has been explicitly set.
  public var hasThreadID: Bool {return self._threadID != nil}
  /// Clears the value of `threadID`. Subsequent reads from it will return its default value.
  public mutating func clearThreadID() {self._threadID = nil}

  public var mediaReady: Bool {
    get {return _mediaReady ?? false}
    set {_mediaReady = newValue}
  }
  /// Returns true if `mediaReady` has been explicitly set.
  public var hasMediaReady: Bool {return self._mediaReady != nil}
  /// Clears the value of `mediaReady`. Subsequent reads from it will return its default value.
  public mutating func clearMediaReady() {self._mediaReady = nil}

  public var hdready: Bool {
    get {return _hdready ?? false}
    set {_hdready = newValue}
  }
  /// Returns true if `hdready` has been explicitly set.
  public var hasHdready: Bool {return self._hdready != nil}
  /// Clears the value of `hdready`. Subsequent reads from it will return its default value.
  public mutating func clearHdready() {self._hdready = nil}

  public var sdready: Bool {
    get {return _sdready ?? false}
    set {_sdready = newValue}
  }
  /// Returns true if `sdready` has been explicitly set.
  public var hasSdready: Bool {return self._sdready != nil}
  /// Clears the value of `sdready`. Subsequent reads from it will return its default value.
  public mutating func clearSdready() {self._sdready = nil}

  public var appID: String {
    get {return _appID ?? String()}
    set {_appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return self._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
  public mutating func clearAppID() {self._appID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _creationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _likeCount: Int64? = nil
  fileprivate var _remixCount: Int64? = nil
  fileprivate var _shareCount: Int64? = nil
  fileprivate var _parentShareID: String? = nil
  fileprivate var _threadID: String? = nil
  fileprivate var _mediaReady: Bool? = nil
  fileprivate var _hdready: Bool? = nil
  fileprivate var _sdready: Bool? = nil
  fileprivate var _appID: String? = nil
}

public struct Proto_Thread {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// All creators to this thread.
  public var creators: [String] {
    get {return _storage._creators}
    set {_uniqueStorage()._creators = newValue}
  }

  /// The last time when one new video is added to the thread.
  public var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  public var hasLastUpdateTime: Bool {return _storage._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdateTime() {_uniqueStorage()._lastUpdateTime = nil}

  /// The original video id that starts the thread.
  public var origShareID: String {
    get {return _storage._origShareID}
    set {_uniqueStorage()._origShareID = newValue}
  }

  /// The original author uid that starts the thread.
  public var origUid: String {
    get {return _storage._origUid}
    set {_uniqueStorage()._origUid = newValue}
  }

  /// The start time of the thread.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  /// The unique id that identifies the thread.
  public var threadID: String {
    get {return _storage._threadID}
    set {_uniqueStorage()._threadID = newValue}
  }

  /// Title of the thread, editable by author only
  public var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  public var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  public mutating func clearTitle() {_uniqueStorage()._title = nil}

  /// Descriptions of the thread, editable by author only
  public var descriptions: String {
    get {return _storage._descriptions ?? String()}
    set {_uniqueStorage()._descriptions = newValue}
  }
  /// Returns true if `descriptions` has been explicitly set.
  public var hasDescriptions: Bool {return _storage._descriptions != nil}
  /// Clears the value of `descriptions`. Subsequent reads from it will return its default value.
  public mutating func clearDescriptions() {_uniqueStorage()._descriptions = nil}

  /// Descriptions of the thread, editable by author only
  public var hashtags: String {
    get {return _storage._hashtags ?? String()}
    set {_uniqueStorage()._hashtags = newValue}
  }
  /// Returns true if `hashtags` has been explicitly set.
  public var hasHashtags: Bool {return _storage._hashtags != nil}
  /// Clears the value of `hashtags`. Subsequent reads from it will return its default value.
  public mutating func clearHashtags() {_uniqueStorage()._hashtags = nil}

  /// Descriptions of the thread, editable by author only
  public var color: String {
    get {return _storage._color ?? String()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {_uniqueStorage()._color = nil}

  /// Total likes count from all thread videos
  public var totalLikeCount: Int64 {
    get {return _storage._totalLikeCount ?? 0}
    set {_uniqueStorage()._totalLikeCount = newValue}
  }
  /// Returns true if `totalLikeCount` has been explicitly set.
  public var hasTotalLikeCount: Bool {return _storage._totalLikeCount != nil}
  /// Clears the value of `totalLikeCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalLikeCount() {_uniqueStorage()._totalLikeCount = nil}

  /// Total shares count from all thread videos
  public var totalShareCount: Int64 {
    get {return _storage._totalShareCount ?? 0}
    set {_uniqueStorage()._totalShareCount = newValue}
  }
  /// Returns true if `totalShareCount` has been explicitly set.
  public var hasTotalShareCount: Bool {return _storage._totalShareCount != nil}
  /// Clears the value of `totalShareCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalShareCount() {_uniqueStorage()._totalShareCount = nil}

  /// Total remix count from all thread videos
  public var totalRemixCount: Int64 {
    get {return _storage._totalRemixCount ?? 0}
    set {_uniqueStorage()._totalRemixCount = newValue}
  }
  /// Returns true if `totalRemixCount` has been explicitly set.
  public var hasTotalRemixCount: Bool {return _storage._totalRemixCount != nil}
  /// Clears the value of `totalRemixCount`. Subsequent reads from it will return its default value.
  public mutating func clearTotalRemixCount() {_uniqueStorage()._totalRemixCount = nil}

  /// Thread state. Currently supported state: deleting
  public var state: String {
    get {return _storage._state ?? String()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  /// A place name tag to the thread
  public var placeName: String {
    get {return _storage._placeName ?? String()}
    set {_uniqueStorage()._placeName = newValue}
  }
  /// Returns true if `placeName` has been explicitly set.
  public var hasPlaceName: Bool {return _storage._placeName != nil}
  /// Clears the value of `placeName`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceName() {_uniqueStorage()._placeName = nil}

  /// A place id to the thread, based on google map definition
  public var placeID: String {
    get {return _storage._placeID ?? String()}
    set {_uniqueStorage()._placeID = newValue}
  }
  /// Returns true if `placeID` has been explicitly set.
  public var hasPlaceID: Bool {return _storage._placeID != nil}
  /// Clears the value of `placeID`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceID() {_uniqueStorage()._placeID = nil}

  /// A place coordinate tag to the thread [retired]
  public var placeCoordinate: Proto_Coordinate2D {
    get {return _storage._placeCoordinate ?? Proto_Coordinate2D()}
    set {_uniqueStorage()._placeCoordinate = newValue}
  }
  /// Returns true if `placeCoordinate` has been explicitly set.
  public var hasPlaceCoordinate: Bool {return _storage._placeCoordinate != nil}
  /// Clears the value of `placeCoordinate`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceCoordinate() {_uniqueStorage()._placeCoordinate = nil}

  /// A score representing priority in feed
  public var feedScore: Double {
    get {return _storage._feedScore ?? 0}
    set {_uniqueStorage()._feedScore = newValue}
  }
  /// Returns true if `feedScore` has been explicitly set.
  public var hasFeedScore: Bool {return _storage._feedScore != nil}
  /// Clears the value of `feedScore`. Subsequent reads from it will return its default value.
  public mutating func clearFeedScore() {_uniqueStorage()._feedScore = nil}

  /// App bundle identifier
  public var appID: String {
    get {return _storage._appID ?? String()}
    set {_uniqueStorage()._appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return _storage._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
  public mutating func clearAppID() {_uniqueStorage()._appID = nil}

  /// A group (community) name
  public var groupName: String {
    get {return _storage._groupName ?? String()}
    set {_uniqueStorage()._groupName = newValue}
  }
  /// Returns true if `groupName` has been explicitly set.
  public var hasGroupName: Bool {return _storage._groupName != nil}
  /// Clears the value of `groupName`. Subsequent reads from it will return its default value.
  public mutating func clearGroupName() {_uniqueStorage()._groupName = nil}

  /// The language preference of the thread
  public var language: String {
    get {return _storage._language ?? String()}
    set {_uniqueStorage()._language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  public var hasLanguage: Bool {return _storage._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  public mutating func clearLanguage() {_uniqueStorage()._language = nil}

  /// The album video which showcase the highlights of the thread
  public var albumVideoPath: String {
    get {return _storage._albumVideoPath ?? String()}
    set {_uniqueStorage()._albumVideoPath = newValue}
  }
  /// Returns true if `albumVideoPath` has been explicitly set.
  public var hasAlbumVideoPath: Bool {return _storage._albumVideoPath != nil}
  /// Clears the value of `albumVideoPath`. Subsequent reads from it will return its default value.
  public mutating func clearAlbumVideoPath() {_uniqueStorage()._albumVideoPath = nil}

  /// The album video thumbnail
  public var albumVideoThumbnailPath: String {
    get {return _storage._albumVideoThumbnailPath ?? String()}
    set {_uniqueStorage()._albumVideoThumbnailPath = newValue}
  }
  /// Returns true if `albumVideoThumbnailPath` has been explicitly set.
  public var hasAlbumVideoThumbnailPath: Bool {return _storage._albumVideoThumbnailPath != nil}
  /// Clears the value of `albumVideoThumbnailPath`. Subsequent reads from it will return its default value.
  public mutating func clearAlbumVideoThumbnailPath() {_uniqueStorage()._albumVideoThumbnailPath = nil}

  /// The place latitude
  public var placeLatitude: Double {
    get {return _storage._placeLatitude ?? 0}
    set {_uniqueStorage()._placeLatitude = newValue}
  }
  /// Returns true if `placeLatitude` has been explicitly set.
  public var hasPlaceLatitude: Bool {return _storage._placeLatitude != nil}
  /// Clears the value of `placeLatitude`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceLatitude() {_uniqueStorage()._placeLatitude = nil}

  /// The place longitude
  public var placeLongitude: Double {
    get {return _storage._placeLongitude ?? 0}
    set {_uniqueStorage()._placeLongitude = newValue}
  }
  /// Returns true if `placeLongitude` has been explicitly set.
  public var hasPlaceLongitude: Bool {return _storage._placeLongitude != nil}
  /// Clears the value of `placeLongitude`. Subsequent reads from it will return its default value.
  public mutating func clearPlaceLongitude() {_uniqueStorage()._placeLongitude = nil}

  /// The share id of hightlight video in feed, if any
  public var highlightShareID: String {
    get {return _storage._highlightShareID ?? String()}
    set {_uniqueStorage()._highlightShareID = newValue}
  }
  /// Returns true if `highlightShareID` has been explicitly set.
  public var hasHighlightShareID: Bool {return _storage._highlightShareID != nil}
  /// Clears the value of `highlightShareID`. Subsequent reads from it will return its default value.
  public mutating func clearHighlightShareID() {_uniqueStorage()._highlightShareID = nil}

  /// The list of commenter uids
  public var commenters: [String] {
    get {return _storage._commenters}
    set {_uniqueStorage()._commenters = newValue}
  }

  /// The list of uids who liked the thread
  public var likers: [String] {
    get {return _storage._likers}
    set {_uniqueStorage()._likers = newValue}
  }

  /// The user inputted tags
  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ThreadAndVideoTuple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var thread: Proto_Thread {
    get {return _thread ?? Proto_Thread()}
    set {_thread = newValue}
  }
  /// Returns true if `thread` has been explicitly set.
  public var hasThread: Bool {return self._thread != nil}
  /// Clears the value of `thread`. Subsequent reads from it will return its default value.
  public mutating func clearThread() {self._thread = nil}

  public var threadVideo: Proto_ThreadVideo {
    get {return _threadVideo ?? Proto_ThreadVideo()}
    set {_threadVideo = newValue}
  }
  /// Returns true if `threadVideo` has been explicitly set.
  public var hasThreadVideo: Bool {return self._threadVideo != nil}
  /// Clears the value of `threadVideo`. Subsequent reads from it will return its default value.
  public mutating func clearThreadVideo() {self._threadVideo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _thread: Proto_Thread? = nil
  fileprivate var _threadVideo: Proto_ThreadVideo? = nil
}

public struct Proto_ResponseFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errCode: String = String()

  public var errMsg: String = String()

  public var data: [Proto_ThreadAndVideoTuple] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ResponseNewestThreads {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errCode: String = String()

  public var errMsg: String = String()

  public var datas: [Proto_ThreadVideo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Coordinate2D {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latitude: Double = 0

  public var longitude: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_RequestFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uid: String {
    get {return _uid ?? String()}
    set {_uid = newValue}
  }
  /// Returns true if `uid` has been explicitly set.
  public var hasUid: Bool {return self._uid != nil}
  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
  public mutating func clearUid() {self._uid = nil}

  public var coordinate: Proto_Coordinate2D {
    get {return _coordinate ?? Proto_Coordinate2D()}
    set {_coordinate = newValue}
  }
  /// Returns true if `coordinate` has been explicitly set.
  public var hasCoordinate: Bool {return self._coordinate != nil}
  /// Clears the value of `coordinate`. Subsequent reads from it will return its default value.
  public mutating func clearCoordinate() {self._coordinate = nil}

  public var appID: String {
    get {return _appID ?? String()}
    set {_appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return self._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
  public mutating func clearAppID() {self._appID = nil}

  public var requestID: String {
    get {return _requestID ?? String()}
    set {_requestID = newValue}
  }
  /// Returns true if `requestID` has been explicitly set.
  public var hasRequestID: Bool {return self._requestID != nil}
  /// Clears the value of `requestID`. Subsequent reads from it will return its default value.
  public mutating func clearRequestID() {self._requestID = nil}

  public var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  public var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  public mutating func clearLanguage() {self._language = nil}

  public var groupName: String {
    get {return _groupName ?? String()}
    set {_groupName = newValue}
  }
  /// Returns true if `groupName` has been explicitly set.
  public var hasGroupName: Bool {return self._groupName != nil}
  /// Clears the value of `groupName`. Subsequent reads from it will return its default value.
  public mutating func clearGroupName() {self._groupName = nil}

  public var isNewUser: Bool {
    get {return _isNewUser ?? false}
    set {_isNewUser = newValue}
  }
  /// Returns true if `isNewUser` has been explicitly set.
  public var hasIsNewUser: Bool {return self._isNewUser != nil}
  /// Clears the value of `isNewUser`. Subsequent reads from it will return its default value.
  public mutating func clearIsNewUser() {self._isNewUser = nil}

  public var friendOnly: Bool {
    get {return _friendOnly ?? false}
    set {_friendOnly = newValue}
  }
  /// Returns true if `friendOnly` has been explicitly set.
  public var hasFriendOnly: Bool {return self._friendOnly != nil}
  /// Clears the value of `friendOnly`. Subsequent reads from it will return its default value.
  public mutating func clearFriendOnly() {self._friendOnly = nil}

  public var withMixer: Bool {
    get {return _withMixer ?? false}
    set {_withMixer = newValue}
  }
  /// Returns true if `withMixer` has been explicitly set.
  public var hasWithMixer: Bool {return self._withMixer != nil}
  /// Clears the value of `withMixer`. Subsequent reads from it will return its default value.
  public mutating func clearWithMixer() {self._withMixer = nil}

  public var withWatchState: Bool {
    get {return _withWatchState ?? false}
    set {_withWatchState = newValue}
  }
  /// Returns true if `withWatchState` has been explicitly set.
  public var hasWithWatchState: Bool {return self._withWatchState != nil}
  /// Clears the value of `withWatchState`. Subsequent reads from it will return its default value.
  public mutating func clearWithWatchState() {self._withWatchState = nil}

  public var promoteFollowedGroups: Bool {
    get {return _promoteFollowedGroups ?? false}
    set {_promoteFollowedGroups = newValue}
  }
  /// Returns true if `promoteFollowedGroups` has been explicitly set.
  public var hasPromoteFollowedGroups: Bool {return self._promoteFollowedGroups != nil}
  /// Clears the value of `promoteFollowedGroups`. Subsequent reads from it will return its default value.
  public mutating func clearPromoteFollowedGroups() {self._promoteFollowedGroups = nil}

  public var selfOnly: Bool {
    get {return _selfOnly ?? false}
    set {_selfOnly = newValue}
  }
  /// Returns true if `selfOnly` has been explicitly set.
  public var hasSelfOnly: Bool {return self._selfOnly != nil}
  /// Clears the value of `selfOnly`. Subsequent reads from it will return its default value.
  public mutating func clearSelfOnly() {self._selfOnly = nil}

  public var customOnly: Bool {
    get {return _customOnly ?? false}
    set {_customOnly = newValue}
  }
  /// Returns true if `customOnly` has been explicitly set.
  public var hasCustomOnly: Bool {return self._customOnly != nil}
  /// Clears the value of `customOnly`. Subsequent reads from it will return its default value.
  public mutating func clearCustomOnly() {self._customOnly = nil}

  public var refitOnly: Bool {
    get {return _refitOnly ?? false}
    set {_refitOnly = newValue}
  }
  /// Returns true if `refitOnly` has been explicitly set.
  public var hasRefitOnly: Bool {return self._refitOnly != nil}
  /// Clears the value of `refitOnly`. Subsequent reads from it will return its default value.
  public mutating func clearRefitOnly() {self._refitOnly = nil}

  public var dailyOnly: Bool {
    get {return _dailyOnly ?? false}
    set {_dailyOnly = newValue}
  }
  /// Returns true if `dailyOnly` has been explicitly set.
  public var hasDailyOnly: Bool {return self._dailyOnly != nil}
  /// Clears the value of `dailyOnly`. Subsequent reads from it will return its default value.
  public mutating func clearDailyOnly() {self._dailyOnly = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _uid: String? = nil
  fileprivate var _coordinate: Proto_Coordinate2D? = nil
  fileprivate var _appID: String? = nil
  fileprivate var _requestID: String? = nil
  fileprivate var _language: String? = nil
  fileprivate var _groupName: String? = nil
  fileprivate var _isNewUser: Bool? = nil
  fileprivate var _friendOnly: Bool? = nil
  fileprivate var _withMixer: Bool? = nil
  fileprivate var _withWatchState: Bool? = nil
  fileprivate var _promoteFollowedGroups: Bool? = nil
  fileprivate var _selfOnly: Bool? = nil
  fileprivate var _customOnly: Bool? = nil
  fileprivate var _refitOnly: Bool? = nil
  fileprivate var _dailyOnly: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_ThreadVideo: @unchecked Sendable {}
extension Proto_Thread: @unchecked Sendable {}
extension Proto_ThreadAndVideoTuple: @unchecked Sendable {}
extension Proto_ResponseFeed: @unchecked Sendable {}
extension Proto_ResponseNewestThreads: @unchecked Sendable {}
extension Proto_Coordinate2D: @unchecked Sendable {}
extension Proto_RequestFeed: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ThreadVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThreadVideo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creationTime"),
    2: .same(proto: "creatorUid"),
    3: .same(proto: "shareId"),
    4: .same(proto: "thoughtId"),
    11: .same(proto: "likeCount"),
    12: .same(proto: "remixCount"),
    13: .same(proto: "shareCount"),
    14: .same(proto: "parentShareId"),
    15: .same(proto: "threadId"),
    16: .same(proto: "mediaReady"),
    17: .same(proto: "HDReady"),
    18: .same(proto: "SDReady"),
    19: .same(proto: "appId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._creationTime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creatorUid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shareID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.thoughtID) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self._likeCount) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self._remixCount) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self._shareCount) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self._parentShareID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self._threadID) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self._mediaReady) }()
      case 17: try { try decoder.decodeSingularBoolField(value: &self._hdready) }()
      case 18: try { try decoder.decodeSingularBoolField(value: &self._sdready) }()
      case 19: try { try decoder.decodeSingularStringField(value: &self._appID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._creationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.creatorUid.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorUid, fieldNumber: 2)
    }
    if !self.shareID.isEmpty {
      try visitor.visitSingularStringField(value: self.shareID, fieldNumber: 3)
    }
    if !self.thoughtID.isEmpty {
      try visitor.visitSingularStringField(value: self.thoughtID, fieldNumber: 4)
    }
    try { if let v = self._likeCount {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._remixCount {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._shareCount {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._parentShareID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._threadID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    } }()
    try { if let v = self._mediaReady {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    } }()
    try { if let v = self._hdready {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
    } }()
    try { if let v = self._sdready {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
    } }()
    try { if let v = self._appID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 19)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThreadVideo, rhs: Proto_ThreadVideo) -> Bool {
    if lhs._creationTime != rhs._creationTime {return false}
    if lhs.creatorUid != rhs.creatorUid {return false}
    if lhs.shareID != rhs.shareID {return false}
    if lhs.thoughtID != rhs.thoughtID {return false}
    if lhs._likeCount != rhs._likeCount {return false}
    if lhs._remixCount != rhs._remixCount {return false}
    if lhs._shareCount != rhs._shareCount {return false}
    if lhs._parentShareID != rhs._parentShareID {return false}
    if lhs._threadID != rhs._threadID {return false}
    if lhs._mediaReady != rhs._mediaReady {return false}
    if lhs._hdready != rhs._hdready {return false}
    if lhs._sdready != rhs._sdready {return false}
    if lhs._appID != rhs._appID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Thread: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Thread"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creators"),
    2: .same(proto: "lastUpdateTime"),
    3: .same(proto: "origShareId"),
    4: .same(proto: "origUid"),
    5: .same(proto: "startTime"),
    6: .same(proto: "threadId"),
    11: .same(proto: "title"),
    17: .same(proto: "descriptions"),
    21: .same(proto: "hashtags"),
    24: .same(proto: "color"),
    12: .same(proto: "totalLikeCount"),
    13: .same(proto: "totalShareCount"),
    14: .same(proto: "totalRemixCount"),
    16: .same(proto: "state"),
    18: .same(proto: "placeName"),
    20: .same(proto: "placeID"),
    19: .same(proto: "placeCoordinate"),
    22: .same(proto: "feedScore"),
    23: .same(proto: "appId"),
    25: .same(proto: "groupName"),
    26: .same(proto: "language"),
    27: .same(proto: "albumVideoPath"),
    28: .same(proto: "albumVideoThumbnailPath"),
    29: .same(proto: "placeLatitude"),
    30: .same(proto: "placeLongitude"),
    31: .same(proto: "highlightShareId"),
    32: .same(proto: "commenters"),
    33: .same(proto: "likers"),
    34: .same(proto: "tags"),
  ]

  fileprivate class _StorageClass {
    var _creators: [String] = []
    var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _origShareID: String = String()
    var _origUid: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _threadID: String = String()
    var _title: String? = nil
    var _descriptions: String? = nil
    var _hashtags: String? = nil
    var _color: String? = nil
    var _totalLikeCount: Int64? = nil
    var _totalShareCount: Int64? = nil
    var _totalRemixCount: Int64? = nil
    var _state: String? = nil
    var _placeName: String? = nil
    var _placeID: String? = nil
    var _placeCoordinate: Proto_Coordinate2D? = nil
    var _feedScore: Double? = nil
    var _appID: String? = nil
    var _groupName: String? = nil
    var _language: String? = nil
    var _albumVideoPath: String? = nil
    var _albumVideoThumbnailPath: String? = nil
    var _placeLatitude: Double? = nil
    var _placeLongitude: Double? = nil
    var _highlightShareID: String? = nil
    var _commenters: [String] = []
    var _likers: [String] = []
    var _tags: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _creators = source._creators
      _lastUpdateTime = source._lastUpdateTime
      _origShareID = source._origShareID
      _origUid = source._origUid
      _startTime = source._startTime
      _threadID = source._threadID
      _title = source._title
      _descriptions = source._descriptions
      _hashtags = source._hashtags
      _color = source._color
      _totalLikeCount = source._totalLikeCount
      _totalShareCount = source._totalShareCount
      _totalRemixCount = source._totalRemixCount
      _state = source._state
      _placeName = source._placeName
      _placeID = source._placeID
      _placeCoordinate = source._placeCoordinate
      _feedScore = source._feedScore
      _appID = source._appID
      _groupName = source._groupName
      _language = source._language
      _albumVideoPath = source._albumVideoPath
      _albumVideoThumbnailPath = source._albumVideoThumbnailPath
      _placeLatitude = source._placeLatitude
      _placeLongitude = source._placeLongitude
      _highlightShareID = source._highlightShareID
      _commenters = source._commenters
      _likers = source._likers
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._creators) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._lastUpdateTime) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._origShareID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._origUid) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._threadID) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._totalLikeCount) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._totalShareCount) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._totalRemixCount) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._state) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._descriptions) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._placeName) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._placeCoordinate) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._placeID) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._hashtags) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._feedScore) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._appID) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._color) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._groupName) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._albumVideoPath) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._albumVideoThumbnailPath) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._placeLatitude) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._placeLongitude) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._highlightShareID) }()
        case 32: try { try decoder.decodeRepeatedStringField(value: &_storage._commenters) }()
        case 33: try { try decoder.decodeRepeatedStringField(value: &_storage._likers) }()
        case 34: try { try decoder.decodeRepeatedStringField(value: &_storage._tags) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._creators.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._creators, fieldNumber: 1)
      }
      try { if let v = _storage._lastUpdateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._origShareID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origShareID, fieldNumber: 3)
      }
      if !_storage._origUid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origUid, fieldNumber: 4)
      }
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._threadID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._threadID, fieldNumber: 6)
      }
      try { if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._totalLikeCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._totalShareCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._totalRemixCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._state {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._descriptions {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._placeName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._placeCoordinate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._placeID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._hashtags {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._feedScore {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._appID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._color {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._groupName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._albumVideoPath {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._albumVideoThumbnailPath {
        try visitor.visitSingularStringField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._placeLatitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._placeLongitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._highlightShareID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 31)
      } }()
      if !_storage._commenters.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._commenters, fieldNumber: 32)
      }
      if !_storage._likers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._likers, fieldNumber: 33)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 34)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Thread, rhs: Proto_Thread) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._creators != rhs_storage._creators {return false}
        if _storage._lastUpdateTime != rhs_storage._lastUpdateTime {return false}
        if _storage._origShareID != rhs_storage._origShareID {return false}
        if _storage._origUid != rhs_storage._origUid {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._threadID != rhs_storage._threadID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._descriptions != rhs_storage._descriptions {return false}
        if _storage._hashtags != rhs_storage._hashtags {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._totalLikeCount != rhs_storage._totalLikeCount {return false}
        if _storage._totalShareCount != rhs_storage._totalShareCount {return false}
        if _storage._totalRemixCount != rhs_storage._totalRemixCount {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._placeName != rhs_storage._placeName {return false}
        if _storage._placeID != rhs_storage._placeID {return false}
        if _storage._placeCoordinate != rhs_storage._placeCoordinate {return false}
        if _storage._feedScore != rhs_storage._feedScore {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._groupName != rhs_storage._groupName {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._albumVideoPath != rhs_storage._albumVideoPath {return false}
        if _storage._albumVideoThumbnailPath != rhs_storage._albumVideoThumbnailPath {return false}
        if _storage._placeLatitude != rhs_storage._placeLatitude {return false}
        if _storage._placeLongitude != rhs_storage._placeLongitude {return false}
        if _storage._highlightShareID != rhs_storage._highlightShareID {return false}
        if _storage._commenters != rhs_storage._commenters {return false}
        if _storage._likers != rhs_storage._likers {return false}
        if _storage._tags != rhs_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ThreadAndVideoTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThreadAndVideoTuple"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thread"),
    2: .same(proto: "threadVideo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._thread) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._threadVideo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._thread {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._threadVideo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThreadAndVideoTuple, rhs: Proto_ThreadAndVideoTuple) -> Bool {
    if lhs._thread != rhs._thread {return false}
    if lhs._threadVideo != rhs._threadVideo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ResponseFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseFeed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errCode"),
    2: .same(proto: "errMsg"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.errCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errMsg) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errCode.isEmpty {
      try visitor.visitSingularStringField(value: self.errCode, fieldNumber: 1)
    }
    if !self.errMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errMsg, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ResponseFeed, rhs: Proto_ResponseFeed) -> Bool {
    if lhs.errCode != rhs.errCode {return false}
    if lhs.errMsg != rhs.errMsg {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ResponseNewestThreads: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseNewestThreads"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ErrCode"),
    2: .same(proto: "ErrMsg"),
    3: .same(proto: "Datas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.errCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errMsg) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.datas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.errCode.isEmpty {
      try visitor.visitSingularStringField(value: self.errCode, fieldNumber: 1)
    }
    if !self.errMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errMsg, fieldNumber: 2)
    }
    if !self.datas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datas, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ResponseNewestThreads, rhs: Proto_ResponseNewestThreads) -> Bool {
    if lhs.errCode != rhs.errCode {return false}
    if lhs.errMsg != rhs.errMsg {return false}
    if lhs.datas != rhs.datas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Coordinate2D: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Coordinate2D"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Coordinate2D, rhs: Proto_Coordinate2D) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_RequestFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestFeed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "coordinate"),
    3: .same(proto: "appID"),
    4: .same(proto: "requestID"),
    5: .same(proto: "language"),
    6: .same(proto: "groupName"),
    7: .same(proto: "isNewUser"),
    8: .same(proto: "friendOnly"),
    9: .same(proto: "withMixer"),
    10: .same(proto: "withWatchState"),
    11: .same(proto: "promoteFollowedGroups"),
    12: .same(proto: "selfOnly"),
    13: .same(proto: "customOnly"),
    14: .same(proto: "refitOnly"),
    15: .same(proto: "dailyOnly"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._uid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._coordinate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._appID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._requestID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._language) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._groupName) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._isNewUser) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._friendOnly) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._withMixer) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._withWatchState) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._promoteFollowedGroups) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._selfOnly) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self._customOnly) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self._refitOnly) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self._dailyOnly) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coordinate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._appID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._requestID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._groupName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._isNewUser {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._friendOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._withMixer {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._withWatchState {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._promoteFollowedGroups {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._selfOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._customOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._refitOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._dailyOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_RequestFeed, rhs: Proto_RequestFeed) -> Bool {
    if lhs._uid != rhs._uid {return false}
    if lhs._coordinate != rhs._coordinate {return false}
    if lhs._appID != rhs._appID {return false}
    if lhs._requestID != rhs._requestID {return false}
    if lhs._language != rhs._language {return false}
    if lhs._groupName != rhs._groupName {return false}
    if lhs._isNewUser != rhs._isNewUser {return false}
    if lhs._friendOnly != rhs._friendOnly {return false}
    if lhs._withMixer != rhs._withMixer {return false}
    if lhs._withWatchState != rhs._withWatchState {return false}
    if lhs._promoteFollowedGroups != rhs._promoteFollowedGroups {return false}
    if lhs._selfOnly != rhs._selfOnly {return false}
    if lhs._customOnly != rhs._customOnly {return false}
    if lhs._refitOnly != rhs._refitOnly {return false}
    if lhs._dailyOnly != rhs._dailyOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
