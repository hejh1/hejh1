//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: health.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Proto_HealthClient`, then call methods of this protocol to make API calls.
internal protocol Proto_HealthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_HealthClientInterceptorFactoryProtocol? { get }

  func check(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse>

  func watch(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions?,
    handler: @escaping (Proto_HealthCheckResponse) -> Void
  ) -> ServerStreamingCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse>
}

extension Proto_HealthClientProtocol {
  internal var serviceName: String {
    return "proto.Health"
  }

  /// Unary call to Check
  ///
  /// - Parameters:
  ///   - request: Request to send to Check.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func check(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse> {
    return self.makeUnaryCall(
      path: Proto_HealthClientMetadata.Methods.check.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckInterceptors() ?? []
    )
  }

  /// Server streaming call to Watch
  ///
  /// - Parameters:
  ///   - request: Request to send to Watch.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func watch(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_HealthCheckResponse) -> Void
  ) -> ServerStreamingCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse> {
    return self.makeServerStreamingCall(
      path: Proto_HealthClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Proto_HealthClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Proto_HealthNIOClient")
internal final class Proto_HealthClient: Proto_HealthClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_HealthClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Proto_HealthClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.Health service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_HealthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Proto_HealthNIOClient: Proto_HealthClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_HealthClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.Health service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_HealthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_HealthAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_HealthClientInterceptorFactoryProtocol? { get }

  func makeCheckCall(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse>

  func makeWatchCall(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_HealthAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_HealthClientMetadata.serviceDescriptor
  }

  internal var interceptors: Proto_HealthClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCheckCall(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_HealthClientMetadata.Methods.check.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckInterceptors() ?? []
    )
  }

  internal func makeWatchCall(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Proto_HealthCheckRequest, Proto_HealthCheckResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Proto_HealthClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_HealthAsyncClientProtocol {
  internal func check(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_HealthCheckResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_HealthClientMetadata.Methods.check.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckInterceptors() ?? []
    )
  }

  internal func watch(
    _ request: Proto_HealthCheckRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_HealthCheckResponse> {
    return self.performAsyncServerStreamingCall(
      path: Proto_HealthClientMetadata.Methods.watch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWatchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Proto_HealthAsyncClient: Proto_HealthAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_HealthClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_HealthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Proto_HealthClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'check'.
  func makeCheckInterceptors() -> [ClientInterceptor<Proto_HealthCheckRequest, Proto_HealthCheckResponse>]

  /// - Returns: Interceptors to use when invoking 'watch'.
  func makeWatchInterceptors() -> [ClientInterceptor<Proto_HealthCheckRequest, Proto_HealthCheckResponse>]
}

internal enum Proto_HealthClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Health",
    fullName: "proto.Health",
    methods: [
      Proto_HealthClientMetadata.Methods.check,
      Proto_HealthClientMetadata.Methods.watch,
    ]
  )

  internal enum Methods {
    internal static let check = GRPCMethodDescriptor(
      name: "Check",
      path: "/proto.Health/Check",
      type: GRPCCallType.unary
    )

    internal static let watch = GRPCMethodDescriptor(
      name: "Watch",
      path: "/proto.Health/Watch",
      type: GRPCCallType.serverStreaming
    )
  }
}

